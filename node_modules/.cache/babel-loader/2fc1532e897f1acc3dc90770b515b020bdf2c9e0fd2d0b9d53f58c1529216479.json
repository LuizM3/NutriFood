{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers.js';\nimport { a as printIonError } from './index6.js';\nimport { c as createColorClasses } from './theme.js';\nimport { q as parseDate, t as getToday, J as is24Hour, S as getLocalizedDateTime, F as getMonthAndYear, K as getLocalizedTime, T as getMonthDayAndYear } from './data.js';\nimport { d as defineCustomElement$2 } from './ripple-effect.js';\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\nconst DatetimeButton = /*@__PURE__*/proxyCustomElement(class DatetimeButton extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.datetimeEl = null;\n    this.overlayEl = null;\n    /**\n     * Accepts one or more string values and converts\n     * them to DatetimeParts. This is done so datetime-button\n     * can work with an array internally and not need\n     * to keep checking if the datetime value is `string` or `string[]`.\n     */\n    this.getParsedDateValues = value => {\n      if (value === undefined || value === null) {\n        return [];\n      }\n      if (Array.isArray(value)) {\n        return value;\n      }\n      return [value];\n    };\n    /**\n     * Check the value property on the linked\n     * ion-datetime and then format it according\n     * to the locale specified on ion-datetime.\n     */\n    this.setDateTimeText = () => {\n      const {\n        datetimeEl,\n        datetimePresentation\n      } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      const {\n        value,\n        locale,\n        hourCycle,\n        preferWheel,\n        multiple,\n        titleSelectedDatesFormatter\n      } = datetimeEl;\n      const parsedValues = this.getParsedDateValues(value);\n      /**\n       * Both ion-datetime and ion-datetime-button default\n       * to today's date and time if no value is set.\n       */\n      const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n      /**\n       * If developers incorrectly use multiple=\"true\"\n       * with non \"date\" datetimes, then just select\n       * the first value so the interface does\n       * not appear broken. Datetime will provide a\n       * warning in the console.\n       */\n      const firstParsedDatetime = parsedDatetimes[0];\n      const use24Hour = is24Hour(locale, hourCycle);\n      this.dateText = this.timeText = undefined;\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const dateText = getMonthDayAndYear(locale, firstParsedDatetime);\n          const timeText = getLocalizedTime(locale, firstParsedDatetime, use24Hour);\n          if (preferWheel) {\n            this.dateText = `${dateText} ${timeText}`;\n          } else {\n            this.dateText = dateText;\n            this.timeText = timeText;\n          }\n          break;\n        case 'date':\n          if (multiple && parsedValues.length !== 1) {\n            let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n            if (titleSelectedDatesFormatter !== undefined) {\n              try {\n                headerText = titleSelectedDatesFormatter(parsedValues);\n              } catch (e) {\n                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n              }\n            }\n            this.dateText = headerText;\n          } else {\n            this.dateText = getMonthDayAndYear(locale, firstParsedDatetime);\n          }\n          break;\n        case 'time':\n          this.timeText = getLocalizedTime(locale, firstParsedDatetime, use24Hour);\n          break;\n        case 'month-year':\n          this.dateText = getMonthAndYear(locale, firstParsedDatetime);\n          break;\n        case 'month':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, {\n            month: 'long'\n          });\n          break;\n        case 'year':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, {\n            year: 'numeric'\n          });\n          break;\n      }\n    };\n    /**\n     * Waits for the ion-datetime to re-render.\n     * This is needed in order to correctly position\n     * a popover relative to the trigger element.\n     */\n    this.waitForDatetimeChanges = async () => {\n      const {\n        datetimeEl\n      } = this;\n      if (!datetimeEl) {\n        return Promise.resolve();\n      }\n      return new Promise(resolve => {\n        addEventListener(datetimeEl, 'ionRender', resolve, {\n          once: true\n        });\n      });\n    };\n    this.handleDateClick = async ev => {\n      const {\n        datetimeEl,\n        datetimePresentation\n      } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the date button,\n       * we need to make sure that only a date\n       * picker is displayed. For presentation styles\n       * that display content other than a date picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'date';\n          /**\n           * The date+time wheel picker\n           * shows date and time together,\n           * so do not adjust the presentation\n           * in that case.\n           */\n          if (!datetimeEl.preferWheel && needsChange) {\n            datetimeEl.presentation = 'date';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'date';\n      this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n    };\n    this.handleTimeClick = ev => {\n      const {\n        datetimeEl,\n        datetimePresentation\n      } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the time button,\n       * we need to make sure that only a time\n       * picker is displayed. For presentation styles\n       * that display content other than a time picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'time';\n          if (needsChange) {\n            datetimeEl.presentation = 'time';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'time';\n      this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n    };\n    /**\n     * If the datetime is presented in an\n     * overlay, the datetime and overlay\n     * should be appropriately sized.\n     * These classes provide default sizing values\n     * that developers can customize.\n     * The goal is to provide an overlay that is\n     * reasonably sized with a datetime that\n     * fills the entire container.\n     */\n    this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n      const {\n        overlayEl\n      } = this;\n      if (!overlayEl) {\n        return;\n      }\n      if (overlayEl.tagName === 'ION-POPOVER') {\n        /**\n         * When the presentation on datetime changes,\n         * we need to wait for the component to re-render\n         * otherwise the computed width/height of the\n         * popover content will be wrong, causing\n         * the popover to not align with the trigger element.\n         */\n        if (needsPresentationChange) {\n          await this.waitForDatetimeChanges();\n        }\n        /**\n         * We pass the trigger button element\n         * so that the popover aligns with the individual\n         * button that was clicked, not the component container.\n         */\n        overlayEl.present(Object.assign(Object.assign({}, ev), {\n          detail: {\n            ionShadowTarget: triggerEl\n          }\n        }));\n      } else {\n        overlayEl.present();\n      }\n    };\n    this.datetimePresentation = 'date-time';\n    this.dateText = undefined;\n    this.timeText = undefined;\n    this.datetimeActive = false;\n    this.selectedButton = undefined;\n    this.color = 'primary';\n    this.disabled = false;\n    this.datetime = undefined;\n  }\n  async componentWillLoad() {\n    const {\n      datetime\n    } = this;\n    if (!datetime) {\n      printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n      return;\n    }\n    const datetimeEl = this.datetimeEl = document.getElementById(datetime);\n    if (!datetimeEl) {\n      printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n      return;\n    }\n    /**\n     * The element reference must be an ion-datetime. Print an error\n     * if a non-datetime element was provided.\n     */\n    if (datetimeEl.tagName !== 'ION-DATETIME') {\n      printIonError(`Expected an ion-datetime instance for ID '${datetime}' but received '${datetimeEl.tagName.toLowerCase()}' instead.`, datetimeEl);\n      return;\n    }\n    /**\n     * Since the datetime can be used in any context (overlays, accordion, etc)\n     * we track when it is visible to determine when it is active.\n     * This informs which button is highlighted as well as the\n     * aria-expanded state.\n     */\n    const io = new IntersectionObserver(entries => {\n      const ev = entries[0];\n      this.datetimeActive = ev.isIntersecting;\n    }, {\n      threshold: 0.01\n    });\n    io.observe(datetimeEl);\n    /**\n     * Get a reference to any modal/popover\n     * the datetime is being used in so we can\n     * correctly size it when it is presented.\n     */\n    const overlayEl = this.overlayEl = datetimeEl.closest('ion-modal, ion-popover');\n    /**\n     * The .ion-datetime-button-overlay class contains\n     * styles that allow any modal/popover to be\n     * sized according to the dimensions of the datetime.\n     * If developers want a smaller/larger overlay all they need\n     * to do is change the width/height of the datetime.\n     * Additionally, this lets us avoid having to set\n     * explicit widths on each variant of datetime.\n     */\n    if (overlayEl) {\n      overlayEl.classList.add('ion-datetime-button-overlay');\n    }\n    componentOnReady(datetimeEl, () => {\n      const datetimePresentation = this.datetimePresentation = datetimeEl.presentation || 'date-time';\n      /**\n       * Set the initial display\n       * in the rendered buttons.\n       *\n       * From there, we need to listen\n       * for ionChange to be emitted\n       * from datetime so we know when\n       * to re-render the displayed\n       * text in the buttons.\n       */\n      this.setDateTimeText();\n      addEventListener(datetimeEl, 'ionValueChange', this.setDateTimeText);\n      /**\n       * Configure the initial selected button\n       * in the event that the datetime is displayed\n       * without clicking one of the datetime buttons.\n       * For example, a datetime could be expanded\n       * in an accordion. In this case users only\n       * need to click the accordion header to show\n       * the datetime.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'date':\n        case 'month-year':\n        case 'month':\n        case 'year':\n          this.selectedButton = 'date';\n          break;\n        case 'time-date':\n        case 'time':\n          this.selectedButton = 'time';\n          break;\n      }\n    });\n  }\n  render() {\n    const {\n      color,\n      dateText,\n      timeText,\n      selectedButton,\n      datetimeActive,\n      disabled\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      class: createColorClasses(color, {\n        [mode]: true,\n        [`${selectedButton}-active`]: datetimeActive,\n        ['datetime-button-disabled']: disabled\n      })\n    }, dateText && h(\"button\", {\n      class: \"ion-activatable\",\n      id: \"date-button\",\n      \"aria-expanded\": datetimeActive ? 'true' : 'false',\n      onClick: this.handleDateClick,\n      disabled: disabled,\n      part: \"native\",\n      ref: el => this.dateTargetEl = el\n    }, h(\"slot\", {\n      name: \"date-target\"\n    }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null)), timeText && h(\"button\", {\n      class: \"ion-activatable\",\n      id: \"time-button\",\n      \"aria-expanded\": datetimeActive ? 'true' : 'false',\n      onClick: this.handleTimeClick,\n      disabled: disabled,\n      part: \"native\",\n      ref: el => this.timeTargetEl = el\n    }, h(\"slot\", {\n      name: \"time-target\"\n    }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)));\n  }\n  get el() {\n    return this;\n  }\n  static get style() {\n    return {\n      ios: iosDatetimeButtonCss,\n      md: mdDatetimeButtonCss\n    };\n  }\n}, [33, \"ion-datetime-button\", {\n  \"color\": [513],\n  \"disabled\": [516],\n  \"datetime\": [1],\n  \"datetimePresentation\": [32],\n  \"dateText\": [32],\n  \"timeText\": [32],\n  \"datetimeActive\": [32],\n  \"selectedButton\": [32]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-datetime-button\", \"ion-ripple-effect\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-datetime-button\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, DatetimeButton);\n        }\n        break;\n      case \"ion-ripple-effect\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$2();\n        }\n        break;\n    }\n  });\n}\nconst IonDatetimeButton = DatetimeButton;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonDatetimeButton, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","h","Host","b","getIonMode","a","addEventListener","c","componentOnReady","printIonError","createColorClasses","q","parseDate","t","getToday","J","is24Hour","S","getLocalizedDateTime","F","getMonthAndYear","K","getLocalizedTime","T","getMonthDayAndYear","d","defineCustomElement$2","iosDatetimeButtonCss","mdDatetimeButtonCss","DatetimeButton","constructor","__registerHost","__attachShadow","datetimeEl","overlayEl","getParsedDateValues","value","undefined","Array","isArray","setDateTimeText","datetimePresentation","locale","hourCycle","preferWheel","multiple","titleSelectedDatesFormatter","parsedValues","parsedDatetimes","length","firstParsedDatetime","use24Hour","dateText","timeText","headerText","e","month","year","waitForDatetimeChanges","Promise","resolve","once","handleDateClick","ev","needsPresentationChange","needsChange","presentation","selectedButton","presentOverlay","dateTargetEl","handleTimeClick","timeTargetEl","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","datetimeActive","color","disabled","datetime","componentWillLoad","el","document","getElementById","toLowerCase","io","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","render","mode","class","id","onClick","part","ref","name","style","ios","md","defineCustomElement$1","customElements","components","forEach","get","define","IonDatetimeButton","defineCustomElement"],"sources":["C:/Users/Edinéia/Documents/NutriFood/node_modules/@ionic/core/components/ion-datetime-button.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers.js';\nimport { a as printIonError } from './index6.js';\nimport { c as createColorClasses } from './theme.js';\nimport { q as parseDate, t as getToday, J as is24Hour, S as getLocalizedDateTime, F as getMonthAndYear, K as getLocalizedTime, T as getMonthDayAndYear } from './data.js';\nimport { d as defineCustomElement$2 } from './ripple-effect.js';\n\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst DatetimeButton = /*@__PURE__*/ proxyCustomElement(class DatetimeButton extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.datetimeEl = null;\n    this.overlayEl = null;\n    /**\n     * Accepts one or more string values and converts\n     * them to DatetimeParts. This is done so datetime-button\n     * can work with an array internally and not need\n     * to keep checking if the datetime value is `string` or `string[]`.\n     */\n    this.getParsedDateValues = (value) => {\n      if (value === undefined || value === null) {\n        return [];\n      }\n      if (Array.isArray(value)) {\n        return value;\n      }\n      return [value];\n    };\n    /**\n     * Check the value property on the linked\n     * ion-datetime and then format it according\n     * to the locale specified on ion-datetime.\n     */\n    this.setDateTimeText = () => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      const { value, locale, hourCycle, preferWheel, multiple, titleSelectedDatesFormatter } = datetimeEl;\n      const parsedValues = this.getParsedDateValues(value);\n      /**\n       * Both ion-datetime and ion-datetime-button default\n       * to today's date and time if no value is set.\n       */\n      const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n      /**\n       * If developers incorrectly use multiple=\"true\"\n       * with non \"date\" datetimes, then just select\n       * the first value so the interface does\n       * not appear broken. Datetime will provide a\n       * warning in the console.\n       */\n      const firstParsedDatetime = parsedDatetimes[0];\n      const use24Hour = is24Hour(locale, hourCycle);\n      this.dateText = this.timeText = undefined;\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const dateText = getMonthDayAndYear(locale, firstParsedDatetime);\n          const timeText = getLocalizedTime(locale, firstParsedDatetime, use24Hour);\n          if (preferWheel) {\n            this.dateText = `${dateText} ${timeText}`;\n          }\n          else {\n            this.dateText = dateText;\n            this.timeText = timeText;\n          }\n          break;\n        case 'date':\n          if (multiple && parsedValues.length !== 1) {\n            let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n            if (titleSelectedDatesFormatter !== undefined) {\n              try {\n                headerText = titleSelectedDatesFormatter(parsedValues);\n              }\n              catch (e) {\n                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n              }\n            }\n            this.dateText = headerText;\n          }\n          else {\n            this.dateText = getMonthDayAndYear(locale, firstParsedDatetime);\n          }\n          break;\n        case 'time':\n          this.timeText = getLocalizedTime(locale, firstParsedDatetime, use24Hour);\n          break;\n        case 'month-year':\n          this.dateText = getMonthAndYear(locale, firstParsedDatetime);\n          break;\n        case 'month':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, { month: 'long' });\n          break;\n        case 'year':\n          this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, { year: 'numeric' });\n          break;\n      }\n    };\n    /**\n     * Waits for the ion-datetime to re-render.\n     * This is needed in order to correctly position\n     * a popover relative to the trigger element.\n     */\n    this.waitForDatetimeChanges = async () => {\n      const { datetimeEl } = this;\n      if (!datetimeEl) {\n        return Promise.resolve();\n      }\n      return new Promise((resolve) => {\n        addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n      });\n    };\n    this.handleDateClick = async (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the date button,\n       * we need to make sure that only a date\n       * picker is displayed. For presentation styles\n       * that display content other than a date picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'date';\n          /**\n           * The date+time wheel picker\n           * shows date and time together,\n           * so do not adjust the presentation\n           * in that case.\n           */\n          if (!datetimeEl.preferWheel && needsChange) {\n            datetimeEl.presentation = 'date';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'date';\n      this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n    };\n    this.handleTimeClick = (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the time button,\n       * we need to make sure that only a time\n       * picker is displayed. For presentation styles\n       * that display content other than a time picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'time';\n          if (needsChange) {\n            datetimeEl.presentation = 'time';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'time';\n      this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n    };\n    /**\n     * If the datetime is presented in an\n     * overlay, the datetime and overlay\n     * should be appropriately sized.\n     * These classes provide default sizing values\n     * that developers can customize.\n     * The goal is to provide an overlay that is\n     * reasonably sized with a datetime that\n     * fills the entire container.\n     */\n    this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n      const { overlayEl } = this;\n      if (!overlayEl) {\n        return;\n      }\n      if (overlayEl.tagName === 'ION-POPOVER') {\n        /**\n         * When the presentation on datetime changes,\n         * we need to wait for the component to re-render\n         * otherwise the computed width/height of the\n         * popover content will be wrong, causing\n         * the popover to not align with the trigger element.\n         */\n        if (needsPresentationChange) {\n          await this.waitForDatetimeChanges();\n        }\n        /**\n         * We pass the trigger button element\n         * so that the popover aligns with the individual\n         * button that was clicked, not the component container.\n         */\n        overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n            ionShadowTarget: triggerEl,\n          } }));\n      }\n      else {\n        overlayEl.present();\n      }\n    };\n    this.datetimePresentation = 'date-time';\n    this.dateText = undefined;\n    this.timeText = undefined;\n    this.datetimeActive = false;\n    this.selectedButton = undefined;\n    this.color = 'primary';\n    this.disabled = false;\n    this.datetime = undefined;\n  }\n  async componentWillLoad() {\n    const { datetime } = this;\n    if (!datetime) {\n      printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n      return;\n    }\n    const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n    if (!datetimeEl) {\n      printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n      return;\n    }\n    /**\n     * The element reference must be an ion-datetime. Print an error\n     * if a non-datetime element was provided.\n     */\n    if (datetimeEl.tagName !== 'ION-DATETIME') {\n      printIonError(`Expected an ion-datetime instance for ID '${datetime}' but received '${datetimeEl.tagName.toLowerCase()}' instead.`, datetimeEl);\n      return;\n    }\n    /**\n     * Since the datetime can be used in any context (overlays, accordion, etc)\n     * we track when it is visible to determine when it is active.\n     * This informs which button is highlighted as well as the\n     * aria-expanded state.\n     */\n    const io = new IntersectionObserver((entries) => {\n      const ev = entries[0];\n      this.datetimeActive = ev.isIntersecting;\n    }, {\n      threshold: 0.01,\n    });\n    io.observe(datetimeEl);\n    /**\n     * Get a reference to any modal/popover\n     * the datetime is being used in so we can\n     * correctly size it when it is presented.\n     */\n    const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n    /**\n     * The .ion-datetime-button-overlay class contains\n     * styles that allow any modal/popover to be\n     * sized according to the dimensions of the datetime.\n     * If developers want a smaller/larger overlay all they need\n     * to do is change the width/height of the datetime.\n     * Additionally, this lets us avoid having to set\n     * explicit widths on each variant of datetime.\n     */\n    if (overlayEl) {\n      overlayEl.classList.add('ion-datetime-button-overlay');\n    }\n    componentOnReady(datetimeEl, () => {\n      const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n      /**\n       * Set the initial display\n       * in the rendered buttons.\n       *\n       * From there, we need to listen\n       * for ionChange to be emitted\n       * from datetime so we know when\n       * to re-render the displayed\n       * text in the buttons.\n       */\n      this.setDateTimeText();\n      addEventListener(datetimeEl, 'ionValueChange', this.setDateTimeText);\n      /**\n       * Configure the initial selected button\n       * in the event that the datetime is displayed\n       * without clicking one of the datetime buttons.\n       * For example, a datetime could be expanded\n       * in an accordion. In this case users only\n       * need to click the accordion header to show\n       * the datetime.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'date':\n        case 'month-year':\n        case 'month':\n        case 'year':\n          this.selectedButton = 'date';\n          break;\n        case 'time-date':\n        case 'time':\n          this.selectedButton = 'time';\n          break;\n      }\n    });\n  }\n  render() {\n    const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { class: createColorClasses(color, {\n        [mode]: true,\n        [`${selectedButton}-active`]: datetimeActive,\n        ['datetime-button-disabled']: disabled,\n      }) }, dateText && (h(\"button\", { class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null))), timeText && (h(\"button\", { class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)))));\n  }\n  get el() { return this; }\n  static get style() { return {\n    ios: iosDatetimeButtonCss,\n    md: mdDatetimeButtonCss\n  }; }\n}, [33, \"ion-datetime-button\", {\n    \"color\": [513],\n    \"disabled\": [516],\n    \"datetime\": [1],\n    \"datetimePresentation\": [32],\n    \"dateText\": [32],\n    \"timeText\": [32],\n    \"datetimeActive\": [32],\n    \"selectedButton\": [32]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-datetime-button\", \"ion-ripple-effect\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-datetime-button\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, DatetimeButton);\n      }\n      break;\n    case \"ion-ripple-effect\":\n      if (!customElements.get(tagName)) {\n        defineCustomElement$2();\n      }\n      break;\n  } });\n}\n\nconst IonDatetimeButton = DatetimeButton;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonDatetimeButton, defineCustomElement };\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,kBAAkB,EAAEC,WAAW,EAAEC,CAAC,EAAEC,IAAI,QAAQ,+BAA+B;AACxF,SAASC,CAAC,IAAIC,UAAU,QAAQ,mBAAmB;AACnD,SAASC,CAAC,IAAIC,gBAAgB,EAAEC,CAAC,IAAIC,gBAAgB,QAAQ,cAAc;AAC3E,SAASH,CAAC,IAAII,aAAa,QAAQ,aAAa;AAChD,SAASF,CAAC,IAAIG,kBAAkB,QAAQ,YAAY;AACpD,SAASC,CAAC,IAAIC,SAAS,EAAEC,CAAC,IAAIC,QAAQ,EAAEC,CAAC,IAAIC,QAAQ,EAAEC,CAAC,IAAIC,oBAAoB,EAAEC,CAAC,IAAIC,eAAe,EAAEC,CAAC,IAAIC,gBAAgB,EAAEC,CAAC,IAAIC,kBAAkB,QAAQ,WAAW;AACzK,SAASC,CAAC,IAAIC,qBAAqB,QAAQ,oBAAoB;AAE/D,MAAMC,oBAAoB,GAAG,06BAA06B;AAEv8B,MAAMC,mBAAmB,GAAG,06BAA06B;AAEt8B,MAAMC,cAAc,GAAG,aAAc9B,kBAAkB,CAAC,MAAM8B,cAAc,SAAS7B,WAAW,CAAC;EAC/F8B,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACC,mBAAmB,GAAIC,KAAK,IAAK;MACpC,IAAIA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI,EAAE;QACzC,OAAO,EAAE;MACX;MACA,IAAIE,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;QACxB,OAAOA,KAAK;MACd;MACA,OAAO,CAACA,KAAK,CAAC;IAChB,CAAC;IACD;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACI,eAAe,GAAG,MAAM;MAC3B,MAAM;QAAEP,UAAU;QAAEQ;MAAqB,CAAC,GAAG,IAAI;MACjD,IAAI,CAACR,UAAU,EAAE;QACf;MACF;MACA,MAAM;QAAEG,KAAK;QAAEM,MAAM;QAAEC,SAAS;QAAEC,WAAW;QAAEC,QAAQ;QAAEC;MAA4B,CAAC,GAAGb,UAAU;MACnG,MAAMc,YAAY,GAAG,IAAI,CAACZ,mBAAmB,CAACC,KAAK,CAAC;MACpD;AACN;AACA;AACA;MACM,MAAMY,eAAe,GAAGpC,SAAS,CAACmC,YAAY,CAACE,MAAM,GAAG,CAAC,GAAGF,YAAY,GAAG,CAACjC,QAAQ,CAAC,CAAC,CAAC,CAAC;MACxF;AACN;AACA;AACA;AACA;AACA;AACA;MACM,MAAMoC,mBAAmB,GAAGF,eAAe,CAAC,CAAC,CAAC;MAC9C,MAAMG,SAAS,GAAGnC,QAAQ,CAAC0B,MAAM,EAAEC,SAAS,CAAC;MAC7C,IAAI,CAACS,QAAQ,GAAG,IAAI,CAACC,QAAQ,GAAGhB,SAAS;MACzC,QAAQI,oBAAoB;QAC1B,KAAK,WAAW;QAChB,KAAK,WAAW;UACd,MAAMW,QAAQ,GAAG5B,kBAAkB,CAACkB,MAAM,EAAEQ,mBAAmB,CAAC;UAChE,MAAMG,QAAQ,GAAG/B,gBAAgB,CAACoB,MAAM,EAAEQ,mBAAmB,EAAEC,SAAS,CAAC;UACzE,IAAIP,WAAW,EAAE;YACf,IAAI,CAACQ,QAAQ,GAAI,GAAEA,QAAS,IAAGC,QAAS,EAAC;UAC3C,CAAC,MACI;YACH,IAAI,CAACD,QAAQ,GAAGA,QAAQ;YACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;UAC1B;UACA;QACF,KAAK,MAAM;UACT,IAAIR,QAAQ,IAAIE,YAAY,CAACE,MAAM,KAAK,CAAC,EAAE;YACzC,IAAIK,UAAU,GAAI,GAAEP,YAAY,CAACE,MAAO,OAAM,CAAC,CAAC;YAChD,IAAIH,2BAA2B,KAAKT,SAAS,EAAE;cAC7C,IAAI;gBACFiB,UAAU,GAAGR,2BAA2B,CAACC,YAAY,CAAC;cACxD,CAAC,CACD,OAAOQ,CAAC,EAAE;gBACR9C,aAAa,CAAC,uDAAuD,EAAE8C,CAAC,CAAC;cAC3E;YACF;YACA,IAAI,CAACH,QAAQ,GAAGE,UAAU;UAC5B,CAAC,MACI;YACH,IAAI,CAACF,QAAQ,GAAG5B,kBAAkB,CAACkB,MAAM,EAAEQ,mBAAmB,CAAC;UACjE;UACA;QACF,KAAK,MAAM;UACT,IAAI,CAACG,QAAQ,GAAG/B,gBAAgB,CAACoB,MAAM,EAAEQ,mBAAmB,EAAEC,SAAS,CAAC;UACxE;QACF,KAAK,YAAY;UACf,IAAI,CAACC,QAAQ,GAAGhC,eAAe,CAACsB,MAAM,EAAEQ,mBAAmB,CAAC;UAC5D;QACF,KAAK,OAAO;UACV,IAAI,CAACE,QAAQ,GAAGlC,oBAAoB,CAACwB,MAAM,EAAEQ,mBAAmB,EAAE;YAAEM,KAAK,EAAE;UAAO,CAAC,CAAC;UACpF;QACF,KAAK,MAAM;UACT,IAAI,CAACJ,QAAQ,GAAGlC,oBAAoB,CAACwB,MAAM,EAAEQ,mBAAmB,EAAE;YAAEO,IAAI,EAAE;UAAU,CAAC,CAAC;UACtF;MACJ;IACF,CAAC;IACD;AACJ;AACA;AACA;AACA;IACI,IAAI,CAACC,sBAAsB,GAAG,YAAY;MACxC,MAAM;QAAEzB;MAAW,CAAC,GAAG,IAAI;MAC3B,IAAI,CAACA,UAAU,EAAE;QACf,OAAO0B,OAAO,CAACC,OAAO,CAAC,CAAC;MAC1B;MACA,OAAO,IAAID,OAAO,CAAEC,OAAO,IAAK;QAC9BtD,gBAAgB,CAAC2B,UAAU,EAAE,WAAW,EAAE2B,OAAO,EAAE;UAAEC,IAAI,EAAE;QAAK,CAAC,CAAC;MACpE,CAAC,CAAC;IACJ,CAAC;IACD,IAAI,CAACC,eAAe,GAAG,MAAOC,EAAE,IAAK;MACnC,MAAM;QAAE9B,UAAU;QAAEQ;MAAqB,CAAC,GAAG,IAAI;MACjD,IAAI,CAACR,UAAU,EAAE;QACf;MACF;MACA,IAAI+B,uBAAuB,GAAG,KAAK;MACnC;AACN;AACA;AACA;AACA;AACA;AACA;MACM,QAAQvB,oBAAoB;QAC1B,KAAK,WAAW;QAChB,KAAK,WAAW;UACd,MAAMwB,WAAW,GAAGhC,UAAU,CAACiC,YAAY,KAAK,MAAM;UACtD;AACV;AACA;AACA;AACA;AACA;UACU,IAAI,CAACjC,UAAU,CAACW,WAAW,IAAIqB,WAAW,EAAE;YAC1ChC,UAAU,CAACiC,YAAY,GAAG,MAAM;YAChCF,uBAAuB,GAAG,IAAI;UAChC;UACA;MACJ;MACA;AACN;AACA;AACA;AACA;AACA;AACA;MACM,IAAI,CAACG,cAAc,GAAG,MAAM;MAC5B,IAAI,CAACC,cAAc,CAACL,EAAE,EAAEC,uBAAuB,EAAE,IAAI,CAACK,YAAY,CAAC;IACrE,CAAC;IACD,IAAI,CAACC,eAAe,GAAIP,EAAE,IAAK;MAC7B,MAAM;QAAE9B,UAAU;QAAEQ;MAAqB,CAAC,GAAG,IAAI;MACjD,IAAI,CAACR,UAAU,EAAE;QACf;MACF;MACA,IAAI+B,uBAAuB,GAAG,KAAK;MACnC;AACN;AACA;AACA;AACA;AACA;AACA;MACM,QAAQvB,oBAAoB;QAC1B,KAAK,WAAW;QAChB,KAAK,WAAW;UACd,MAAMwB,WAAW,GAAGhC,UAAU,CAACiC,YAAY,KAAK,MAAM;UACtD,IAAID,WAAW,EAAE;YACfhC,UAAU,CAACiC,YAAY,GAAG,MAAM;YAChCF,uBAAuB,GAAG,IAAI;UAChC;UACA;MACJ;MACA;AACN;AACA;AACA;AACA;AACA;AACA;MACM,IAAI,CAACG,cAAc,GAAG,MAAM;MAC5B,IAAI,CAACC,cAAc,CAACL,EAAE,EAAEC,uBAAuB,EAAE,IAAI,CAACO,YAAY,CAAC;IACrE,CAAC;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI,CAACH,cAAc,GAAG,OAAOL,EAAE,EAAEC,uBAAuB,EAAEQ,SAAS,KAAK;MACtE,MAAM;QAAEtC;MAAU,CAAC,GAAG,IAAI;MAC1B,IAAI,CAACA,SAAS,EAAE;QACd;MACF;MACA,IAAIA,SAAS,CAACuC,OAAO,KAAK,aAAa,EAAE;QACvC;AACR;AACA;AACA;AACA;AACA;AACA;QACQ,IAAIT,uBAAuB,EAAE;UAC3B,MAAM,IAAI,CAACN,sBAAsB,CAAC,CAAC;QACrC;QACA;AACR;AACA;AACA;AACA;QACQxB,SAAS,CAACwC,OAAO,CAACC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEb,EAAE,CAAC,EAAE;UAAEc,MAAM,EAAE;YAC7DC,eAAe,EAAEN;UACnB;QAAE,CAAC,CAAC,CAAC;MACT,CAAC,MACI;QACHtC,SAAS,CAACwC,OAAO,CAAC,CAAC;MACrB;IACF,CAAC;IACD,IAAI,CAACjC,oBAAoB,GAAG,WAAW;IACvC,IAAI,CAACW,QAAQ,GAAGf,SAAS;IACzB,IAAI,CAACgB,QAAQ,GAAGhB,SAAS;IACzB,IAAI,CAAC0C,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACZ,cAAc,GAAG9B,SAAS;IAC/B,IAAI,CAAC2C,KAAK,GAAG,SAAS;IACtB,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAACC,QAAQ,GAAG7C,SAAS;EAC3B;EACA,MAAM8C,iBAAiBA,CAAA,EAAG;IACxB,MAAM;MAAED;IAAS,CAAC,GAAG,IAAI;IACzB,IAAI,CAACA,QAAQ,EAAE;MACbzE,aAAa,CAAC,0GAA0G,EAAE,IAAI,CAAC2E,EAAE,CAAC;MAClI;IACF;IACA,MAAMnD,UAAU,GAAI,IAAI,CAACA,UAAU,GAAGoD,QAAQ,CAACC,cAAc,CAACJ,QAAQ,CAAE;IACxE,IAAI,CAACjD,UAAU,EAAE;MACfxB,aAAa,CAAE,0CAAyCyE,QAAS,IAAG,EAAE,IAAI,CAACE,EAAE,CAAC;MAC9E;IACF;IACA;AACJ;AACA;AACA;IACI,IAAInD,UAAU,CAACwC,OAAO,KAAK,cAAc,EAAE;MACzChE,aAAa,CAAE,6CAA4CyE,QAAS,mBAAkBjD,UAAU,CAACwC,OAAO,CAACc,WAAW,CAAC,CAAE,YAAW,EAAEtD,UAAU,CAAC;MAC/I;IACF;IACA;AACJ;AACA;AACA;AACA;AACA;IACI,MAAMuD,EAAE,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;MAC/C,MAAM3B,EAAE,GAAG2B,OAAO,CAAC,CAAC,CAAC;MACrB,IAAI,CAACX,cAAc,GAAGhB,EAAE,CAAC4B,cAAc;IACzC,CAAC,EAAE;MACDC,SAAS,EAAE;IACb,CAAC,CAAC;IACFJ,EAAE,CAACK,OAAO,CAAC5D,UAAU,CAAC;IACtB;AACJ;AACA;AACA;AACA;IACI,MAAMC,SAAS,GAAI,IAAI,CAACA,SAAS,GAAGD,UAAU,CAAC6D,OAAO,CAAC,wBAAwB,CAAE;IACjF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,IAAI5D,SAAS,EAAE;MACbA,SAAS,CAAC6D,SAAS,CAACC,GAAG,CAAC,6BAA6B,CAAC;IACxD;IACAxF,gBAAgB,CAACyB,UAAU,EAAE,MAAM;MACjC,MAAMQ,oBAAoB,GAAI,IAAI,CAACA,oBAAoB,GAAGR,UAAU,CAACiC,YAAY,IAAI,WAAY;MACjG;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,IAAI,CAAC1B,eAAe,CAAC,CAAC;MACtBlC,gBAAgB,CAAC2B,UAAU,EAAE,gBAAgB,EAAE,IAAI,CAACO,eAAe,CAAC;MACpE;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,QAAQC,oBAAoB;QAC1B,KAAK,WAAW;QAChB,KAAK,MAAM;QACX,KAAK,YAAY;QACjB,KAAK,OAAO;QACZ,KAAK,MAAM;UACT,IAAI,CAAC0B,cAAc,GAAG,MAAM;UAC5B;QACF,KAAK,WAAW;QAChB,KAAK,MAAM;UACT,IAAI,CAACA,cAAc,GAAG,MAAM;UAC5B;MACJ;IACF,CAAC,CAAC;EACJ;EACA8B,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEjB,KAAK;MAAE5B,QAAQ;MAAEC,QAAQ;MAAEc,cAAc;MAAEY,cAAc;MAAEE;IAAS,CAAC,GAAG,IAAI;IACpF,MAAMiB,IAAI,GAAG9F,UAAU,CAAC,IAAI,CAAC;IAC7B,OAAQH,CAAC,CAACC,IAAI,EAAE;MAAEiG,KAAK,EAAEzF,kBAAkB,CAACsE,KAAK,EAAE;QAC/C,CAACkB,IAAI,GAAG,IAAI;QACZ,CAAE,GAAE/B,cAAe,SAAQ,GAAGY,cAAc;QAC5C,CAAC,0BAA0B,GAAGE;MAChC,CAAC;IAAE,CAAC,EAAE7B,QAAQ,IAAKnD,CAAC,CAAC,QAAQ,EAAE;MAAEkG,KAAK,EAAE,iBAAiB;MAAEC,EAAE,EAAE,aAAa;MAAE,eAAe,EAAErB,cAAc,GAAG,MAAM,GAAG,OAAO;MAAEsB,OAAO,EAAE,IAAI,CAACvC,eAAe;MAAEmB,QAAQ,EAAEA,QAAQ;MAAEqB,IAAI,EAAE,QAAQ;MAAEC,GAAG,EAAGnB,EAAE,IAAM,IAAI,CAACf,YAAY,GAAGe;IAAI,CAAC,EAAEnF,CAAC,CAAC,MAAM,EAAE;MAAEuG,IAAI,EAAE;IAAc,CAAC,EAAEpD,QAAQ,CAAC,EAAE8C,IAAI,KAAK,IAAI,IAAIjG,CAAC,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAE,EAAEoD,QAAQ,IAAKpD,CAAC,CAAC,QAAQ,EAAE;MAAEkG,KAAK,EAAE,iBAAiB;MAAEC,EAAE,EAAE,aAAa;MAAE,eAAe,EAAErB,cAAc,GAAG,MAAM,GAAG,OAAO;MAAEsB,OAAO,EAAE,IAAI,CAAC/B,eAAe;MAAEW,QAAQ,EAAEA,QAAQ;MAAEqB,IAAI,EAAE,QAAQ;MAAEC,GAAG,EAAGnB,EAAE,IAAM,IAAI,CAACb,YAAY,GAAGa;IAAI,CAAC,EAAEnF,CAAC,CAAC,MAAM,EAAE;MAAEuG,IAAI,EAAE;IAAc,CAAC,EAAEnD,QAAQ,CAAC,EAAE6C,IAAI,KAAK,IAAI,IAAIjG,CAAC,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAE,CAAC;EACvpB;EACA,IAAImF,EAAEA,CAAA,EAAG;IAAE,OAAO,IAAI;EAAE;EACxB,WAAWqB,KAAKA,CAAA,EAAG;IAAE,OAAO;MAC1BC,GAAG,EAAE/E,oBAAoB;MACzBgF,EAAE,EAAE/E;IACN,CAAC;EAAE;AACL,CAAC,EAAE,CAAC,EAAE,EAAE,qBAAqB,EAAE;EAC3B,OAAO,EAAE,CAAC,GAAG,CAAC;EACd,UAAU,EAAE,CAAC,GAAG,CAAC;EACjB,UAAU,EAAE,CAAC,CAAC,CAAC;EACf,sBAAsB,EAAE,CAAC,EAAE,CAAC;EAC5B,UAAU,EAAE,CAAC,EAAE,CAAC;EAChB,UAAU,EAAE,CAAC,EAAE,CAAC;EAChB,gBAAgB,EAAE,CAAC,EAAE,CAAC;EACtB,gBAAgB,EAAE,CAAC,EAAE;AACvB,CAAC,CAAC,CAAC;AACL,SAASgF,qBAAqBA,CAAA,EAAG;EAC/B,IAAI,OAAOC,cAAc,KAAK,WAAW,EAAE;IACzC;EACF;EACA,MAAMC,UAAU,GAAG,CAAC,qBAAqB,EAAE,mBAAmB,CAAC;EAC/DA,UAAU,CAACC,OAAO,CAACtC,OAAO,IAAI;IAAE,QAAQA,OAAO;MAC7C,KAAK,qBAAqB;QACxB,IAAI,CAACoC,cAAc,CAACG,GAAG,CAACvC,OAAO,CAAC,EAAE;UAChCoC,cAAc,CAACI,MAAM,CAACxC,OAAO,EAAE5C,cAAc,CAAC;QAChD;QACA;MACF,KAAK,mBAAmB;QACtB,IAAI,CAACgF,cAAc,CAACG,GAAG,CAACvC,OAAO,CAAC,EAAE;UAChC/C,qBAAqB,CAAC,CAAC;QACzB;QACA;IACJ;EAAE,CAAC,CAAC;AACN;AAEA,MAAMwF,iBAAiB,GAAGrF,cAAc;AACxC,MAAMsF,mBAAmB,GAAGP,qBAAqB;AAEjD,SAASM,iBAAiB,EAAEC,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}