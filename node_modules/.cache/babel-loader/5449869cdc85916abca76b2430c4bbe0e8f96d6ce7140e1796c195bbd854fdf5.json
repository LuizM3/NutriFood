{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Build } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config } from './ionic-global.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { p as assert, s as shallowEqualStringMap } from './helpers.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index3.js';\nimport { a as attachComponent } from './framework-delegate.js';\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\n// TODO(FW-2832): types\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      } else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = pages => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\nconst Nav = /*@__PURE__*/proxyCustomElement(class Nav extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    this.delegate = undefined;\n    this.swipeGesture = undefined;\n    this.animated = true;\n    this.animation = undefined;\n    this.rootParams = undefined;\n    this.root = undefined;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    const isDev = Build.isDev;\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      } else if (isDev) {\n        console.warn('<ion-nav> does not support a root attribute when using ion-router.');\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  connectedCallback() {\n    this.destroyed = false;\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    // Release swipe back gesture and transition.\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.transInstr.length = 0;\n    this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.insert(-1, component, componentProps, opts, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.insertPages(insertIndex, [{\n      component,\n      componentProps\n    }], opts, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.removeIndex(-1, 1, opts, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const ti = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      ti.removeView = indexOrViewCtrl;\n      ti.removeStart = 1;\n    } else if (typeof indexOrViewCtrl === 'number') {\n      ti.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(ti, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.removeIndex(1, -1, opts, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex) {\n    let removeCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let opts = arguments.length > 2 ? arguments[2] : undefined;\n    let done = arguments.length > 3 ? arguments[3] : undefined;\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{\n      component,\n      componentProps\n    }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    opts !== null && opts !== void 0 ? opts : opts = {};\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Called by the router to update the view.\n   *\n   * @param id The component tag.\n   * @param params The component params.\n   * @param direction A direction hint.\n   * @param animation an AnimationBuilder.\n   *\n   * @return the status.\n   * @internal\n   */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n    let resolve;\n    const promise = new Promise(r => resolve = r);\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => mark = r);\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          }\n        });\n        return p;\n      }\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    } else {\n      // Look for a view matching the target in the view stack.\n      const viewController = this.views.find(v => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animationBuilder: animation\n        }));\n      } else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n          animationBuilder: animation\n        }));\n      } else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animated: true,\n          animationBuilder: animation\n        }));\n      }\n    }\n    return promise;\n  }\n  /**\n   * Called by <ion-router> to retrieve the current component.\n   *\n   * @internal\n   */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    if (active) {\n      return {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element\n      };\n    }\n    return undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  async getActive() {\n    return this.getActiveSync();\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  async getByIndex(index) {\n    return this.views[index];\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  async canGoBack(view) {\n    return this.canGoBackSync(view);\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  async getPrevious(view) {\n    return this.getPreviousSync(view);\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync() {\n    let view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync() {\n    let view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  /**\n   * Adds a navigation stack change to the queue and schedules it to run.\n   *\n   * @returns Whether the transition succeeds.\n   */\n  async queueTrns(ti, done) {\n    var _a, _b;\n    if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n      return false;\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return false;\n        }\n        if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return false;\n        }\n      }\n    }\n    // Normalize empty\n    if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    } else {\n      ti.resolve(false);\n    }\n  }\n  /**\n   * Consumes the next transition in the queue.\n   *\n   * @returns whether the transition is executed.\n   */\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now, executes the next instructions.\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  /** Executes all the transition instruction from the queue. */\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      let result;\n      if (requiresTransition) {\n        result = await this.transition(enteringView, leavingView, ti);\n      } else {\n        // transition is not required, so we are already done!\n        // they're inserting/removing the views somewhere in the middle or\n        // beginning, so visually nothing needs to animate/transition\n        // resolve immediately because there's no animation that's happening\n        result = {\n          hasCompleted: true,\n          requiresTransition: false\n        };\n      }\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    } catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    var _a, _b;\n    var _c;\n    const viewsLength = this.views.length;\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : ti.opts = {};\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : _c.delegate = this.delegate;\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  /**\n   * Returns the view that will be entered considering the transition instructions.\n   *\n   * @param ti The instructions.\n   * @param leavingView The view being left or undefined if none.\n   *\n   * @returns The view that will be entered, undefined if none.\n   */\n  getEnteringView(ti, leavingView) {\n    // The last inserted view will be entered when view are inserted.\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      return insertViews[insertViews.length - 1];\n    }\n    // When views are deleted, we will enter the last view that is not removed and not the view being left.\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  /**\n   * Adds and Removes the views from the navigation stack.\n   *\n   * @param enteringView The view being entered.\n   * @param leavingView The view being left.\n   * @param ti The instructions.\n   */\n  postViewInit(enteringView, leavingView, ti) {\n    var _a, _b, _c;\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    // Compute the views to remove.\n    const opts = ti.opts;\n    const {\n      insertViews,\n      removeStart,\n      removeCount\n    } = ti;\n    /** Records the view to destroy */\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\n        const view = this.views[i];\n        if (view !== undefined && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : opts.direction = 'back';\n    }\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n    assert(finalNumViews >= 0, 'final balance can not be negative');\n    if (finalNumViews === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // Insert the new views in the stack.\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : opts.direction = 'forward';\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation ? ani => this.sbAni = ani : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({\n      mode,\n      showGoBack: this.canGoBackSync(enteringView),\n      baseEl: this.el,\n      progressCallback,\n      animated: this.animated && config.getBoolean('animated', true),\n      enteringEl,\n      leavingEl\n    }, opts), {\n      animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation')\n    });\n    const {\n      hasCompleted\n    } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    /**\n     * If the transition did not complete, the leavingView will still be the active\n     * view on the stack. Otherwise unmount all the views after the enteringView.\n     */\n    const activeView = hasCompleted ? enteringView : leavingView;\n    if (activeView) {\n      this.unmountInactiveViews(activeView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  /**\n   * Inserts a view at the specified index.\n   *\n   * When the view already is in the stack it will be moved to the new position.\n   *\n   * @param view The view to insert.\n   * @param index The index where to insert the view.\n   */\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      assert(view.nav === this, 'view is not part of the nav');\n      // The view already in the stack, removes it.\n      views.splice(existingIndex, 1);\n      // and add it back at the requested index.\n      views.splice(index, 0, view);\n    } else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      views.splice(index, 0, view);\n    }\n  }\n  /**\n   * Removes a view from the stack.\n   *\n   * @param view The view to remove.\n   */\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * Unmounts all inactive views after the specified active view.\n   *\n   * DOM WRITE\n   *\n   * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\n   */\n  unmountInactiveViews(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        } else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();\n  }\n  onStart() {\n    this.pop({\n      direction: 'back',\n      progressAnimation: true\n    });\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, {\n        oneTimeCallback: true\n      });\n      // Account for rounding errors in JS\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      } else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"swipeGesture\": [\"swipeGestureChanged\"],\n      \"root\": [\"rootChanged\"]\n    };\n  }\n  static get style() {\n    return navCss;\n  }\n}, [1, \"ion-nav\", {\n  \"delegate\": [16],\n  \"swipeGesture\": [1028, \"swipe-gesture\"],\n  \"animated\": [4],\n  \"animation\": [16],\n  \"rootParams\": [16],\n  \"root\": [1],\n  \"push\": [64],\n  \"insert\": [64],\n  \"insertPages\": [64],\n  \"pop\": [64],\n  \"popTo\": [64],\n  \"popToRoot\": [64],\n  \"removeIndex\": [64],\n  \"setRoot\": [64],\n  \"setPages\": [64],\n  \"setRouteId\": [64],\n  \"getRouteId\": [64],\n  \"getActive\": [64],\n  \"getByIndex\": [64],\n  \"canGoBack\": [64],\n  \"getPrevious\": [64]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-nav\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-nav\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Nav);\n        }\n        break;\n    }\n  });\n}\nconst IonNav = Nav;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonNav, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","h","Build","b","getIonMode","c","config","g","getTimeGivenProgression","p","assert","s","shallowEqualStringMap","l","lifecycle","t","transition","setPageHidden","d","LIFECYCLE_WILL_UNLOAD","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","constructor","component","params","state","init","container","element","delegate","_destroy","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","convertToView","page","convertToViews","pages","map","componentProps","filter","v","navCss","Nav","__registerHost","__attachShadow","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","swipeGesture","animated","animation","rootParams","root","swipeGestureChanged","gesture","enable","rootChanged","isDev","setRoot","console","warn","componentWillLoad","document","querySelector","el","closest","mode","getBoolean","emit","componentDidLoad","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","connectedCallback","disconnectedCallback","destroy","length","push","opts","done","insert","insertIndex","insertPages","insertComponents","queueTrns","insertStart","insertViews","pop","removeIndex","popTo","indexOrViewCtrl","ti","removeStart","removeCount","removeView","popToRoot","startIndex","arguments","setPages","setRouteId","direction","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","markVisible","viewController","find","Object","assign","animationBuilder","getRouteId","tagName","getActive","getByIndex","index","canGoBack","canGoBackSync","getPrevious","getPreviousSync","getLength","indexOf","_a","_b","skipIfBusy","reject","router","canTransition","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","failed","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","isBackDirection","_c","viewsLength","viewControllers","removeEnd","i","destroyQueue","finalNumViews","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","activeView","unmountInactiveViews","existingIndex","splice","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","render","watchers","style","defineCustomElement$1","customElements","components","forEach","define","IonNav","defineCustomElement"],"sources":["C:/Users/Edinéia/Documents/NutriFood/node_modules/@ionic/core/components/ion-nav.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Build } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config } from './ionic-global.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { p as assert, s as shallowEqualStringMap } from './helpers.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index3.js';\nimport { a as attachComponent } from './framework-delegate.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\n// TODO(FW-2832): types\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages\n    .map((page) => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  })\n    .filter((v) => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = /*@__PURE__*/ proxyCustomElement(class Nav extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    this.delegate = undefined;\n    this.swipeGesture = undefined;\n    this.animated = true;\n    this.animation = undefined;\n    this.rootParams = undefined;\n    this.root = undefined;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    const isDev = Build.isDev;\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n      else if (isDev) {\n        console.warn('<ion-nav> does not support a root attribute when using ion-router.');\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  connectedCallback() {\n    this.destroyed = false;\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    // Release swipe back gesture and transition.\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.transInstr.length = 0;\n    this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.insert(-1, component, componentProps, opts, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.insertPages(insertIndex, [{ component, componentProps }], opts, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts,\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.removeIndex(-1, 1, opts, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const ti = {\n      removeStart: -1,\n      removeCount: -1,\n      opts,\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      ti.removeView = indexOrViewCtrl;\n      ti.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      ti.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(ti, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.removeIndex(1, -1, opts, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts,\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    opts !== null && opts !== void 0 ? opts : (opts = {});\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts,\n    }, done);\n  }\n  /**\n   * Called by the router to update the view.\n   *\n   * @param id The component tag.\n   * @param params The component params.\n   * @param direction A direction hint.\n   * @param animation an AnimationBuilder.\n   *\n   * @return the status.\n   * @internal\n   */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element,\n      });\n    }\n    let resolve;\n    const promise = new Promise((r) => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: (enteringEl) => {\n        let mark;\n        const p = new Promise((r) => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          },\n        });\n        return p;\n      },\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      // Look for a view matching the target in the view stack.\n      const viewController = this.views.find((v) => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /**\n   * Called by <ion-router> to retrieve the current component.\n   *\n   * @internal\n   */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    if (active) {\n      return {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element,\n      };\n    }\n    return undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  async getActive() {\n    return this.getActiveSync();\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  async getByIndex(index) {\n    return this.views[index];\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  async canGoBack(view) {\n    return this.canGoBackSync(view);\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  async getPrevious(view) {\n    return this.getPreviousSync(view);\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  /**\n   * Adds a navigation stack change to the queue and schedules it to run.\n   *\n   * @returns Whether the transition succeeds.\n   */\n  async queueTrns(ti, done) {\n    var _a, _b;\n    if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n      return false;\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return false;\n        }\n        if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return false;\n        }\n      }\n    }\n    // Normalize empty\n    if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  /**\n   * Consumes the next transition in the queue.\n   *\n   * @returns whether the transition is executed.\n   */\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now, executes the next instructions.\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  /** Executes all the transition instruction from the queue. */\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      let result;\n      if (requiresTransition) {\n        result = await this.transition(enteringView, leavingView, ti);\n      }\n      else {\n        // transition is not required, so we are already done!\n        // they're inserting/removing the views somewhere in the middle or\n        // beginning, so visually nothing needs to animate/transition\n        // resolve immediately because there's no animation that's happening\n        result = {\n          hasCompleted: true,\n          requiresTransition: false,\n        };\n      }\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    var _a, _b;\n    var _c;\n    const viewsLength = this.views.length;\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : (ti.opts = {});\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : (_c.delegate = this.delegate);\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  /**\n   * Returns the view that will be entered considering the transition instructions.\n   *\n   * @param ti The instructions.\n   * @param leavingView The view being left or undefined if none.\n   *\n   * @returns The view that will be entered, undefined if none.\n   */\n  getEnteringView(ti, leavingView) {\n    // The last inserted view will be entered when view are inserted.\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      return insertViews[insertViews.length - 1];\n    }\n    // When views are deleted, we will enter the last view that is not removed and not the view being left.\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  /**\n   * Adds and Removes the views from the navigation stack.\n   *\n   * @param enteringView The view being entered.\n   * @param leavingView The view being left.\n   * @param ti The instructions.\n   */\n  postViewInit(enteringView, leavingView, ti) {\n    var _a, _b, _c;\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    // Compute the views to remove.\n    const opts = ti.opts;\n    const { insertViews, removeStart, removeCount } = ti;\n    /** Records the view to destroy */\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\n        const view = this.views[i];\n        if (view !== undefined && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : (opts.direction = 'back');\n    }\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n    assert(finalNumViews >= 0, 'final balance can not be negative');\n    if (finalNumViews === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // Insert the new views in the stack.\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : (opts.direction = 'forward');\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation ? (ani) => (this.sbAni = ani) : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    /**\n     * If the transition did not complete, the leavingView will still be the active\n     * view on the stack. Otherwise unmount all the views after the enteringView.\n     */\n    const activeView = hasCompleted ? enteringView : leavingView;\n    if (activeView) {\n      this.unmountInactiveViews(activeView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction,\n    };\n  }\n  /**\n   * Inserts a view at the specified index.\n   *\n   * When the view already is in the stack it will be moved to the new position.\n   *\n   * @param view The view to insert.\n   * @param index The index where to insert the view.\n   */\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      assert(view.nav === this, 'view is not part of the nav');\n      // The view already in the stack, removes it.\n      views.splice(existingIndex, 1);\n      // and add it back at the requested index.\n      views.splice(index, 0, view);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      views.splice(index, 0, view);\n    }\n  }\n  /**\n   * Removes a view from the stack.\n   *\n   * @param view The view to remove.\n   */\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * Unmounts all inactive views after the specified active view.\n   *\n   * DOM WRITE\n   *\n   * @param activeView The view that is actively visible in the stack. Used to calculate which views to unmount.\n   */\n  unmountInactiveViews(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.pop({ direction: 'back', progressAnimation: true });\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n  static get style() { return navCss; }\n}, [1, \"ion-nav\", {\n    \"delegate\": [16],\n    \"swipeGesture\": [1028, \"swipe-gesture\"],\n    \"animated\": [4],\n    \"animation\": [16],\n    \"rootParams\": [16],\n    \"root\": [1],\n    \"push\": [64],\n    \"insert\": [64],\n    \"insertPages\": [64],\n    \"pop\": [64],\n    \"popTo\": [64],\n    \"popToRoot\": [64],\n    \"removeIndex\": [64],\n    \"setRoot\": [64],\n    \"setPages\": [64],\n    \"setRouteId\": [64],\n    \"getRouteId\": [64],\n    \"getActive\": [64],\n    \"getByIndex\": [64],\n    \"canGoBack\": [64],\n    \"getPrevious\": [64]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-nav\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-nav\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Nav);\n      }\n      break;\n  } });\n}\n\nconst IonNav = Nav;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonNav, defineCustomElement };\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,kBAAkB,EAAEC,WAAW,EAAEC,WAAW,EAAEC,CAAC,EAAEC,KAAK,QAAQ,+BAA+B;AACtG,SAASC,CAAC,IAAIC,UAAU,EAAEC,CAAC,IAAIC,MAAM,QAAQ,mBAAmB;AAChE,SAASC,CAAC,IAAIC,uBAAuB,QAAQ,mBAAmB;AAChE,SAASC,CAAC,IAAIC,MAAM,EAAEC,CAAC,IAAIC,qBAAqB,QAAQ,cAAc;AACtE,SAASC,CAAC,IAAIC,SAAS,EAAEC,CAAC,IAAIC,UAAU,EAAEL,CAAC,IAAIM,aAAa,EAAEC,CAAC,IAAIC,qBAAqB,EAAEhB,CAAC,IAAIiB,oBAAoB,EAAEf,CAAC,IAAIgB,mBAAmB,QAAQ,aAAa;AAClK,SAASC,CAAC,IAAIC,eAAe,QAAQ,yBAAyB;AAE9D,MAAMC,cAAc,GAAG,CAAC;AACxB,MAAMC,mBAAmB,GAAG,CAAC;AAC7B,MAAMC,oBAAoB,GAAG,CAAC;AAC9B;AACA,MAAMC,cAAc,CAAC;EACnBC,WAAWA,CAACC,SAAS,EAAEC,MAAM,EAAE;IAC7B,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGP,cAAc;EAC7B;EACA,MAAMQ,IAAIA,CAACC,SAAS,EAAE;IACpB,IAAI,CAACF,KAAK,GAAGN,mBAAmB;IAChC,IAAI,CAAC,IAAI,CAACS,OAAO,EAAE;MACjB,MAAML,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC,IAAI,CAACK,OAAO,GAAG,MAAMX,eAAe,CAAC,IAAI,CAACY,QAAQ,EAAEF,SAAS,EAAEJ,SAAS,EAAE,CAAC,UAAU,EAAE,oBAAoB,CAAC,EAAE,IAAI,CAACC,MAAM,CAAC;IAC5H;EACF;EACA;AACF;AACA;EACEM,QAAQA,CAAA,EAAG;IACT1B,MAAM,CAAC,IAAI,CAACqB,KAAK,KAAKL,oBAAoB,EAAE,6BAA6B,CAAC;IAC1E,MAAMQ,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAIA,OAAO,EAAE;MACX,IAAI,IAAI,CAACC,QAAQ,EAAE;QACjB,IAAI,CAACA,QAAQ,CAACE,iBAAiB,CAACH,OAAO,CAACI,aAAa,EAAEJ,OAAO,CAAC;MACjE,CAAC,MACI;QACHA,OAAO,CAACK,MAAM,CAAC,CAAC;MAClB;IACF;IACA,IAAI,CAACC,GAAG,GAAGC,SAAS;IACpB,IAAI,CAACV,KAAK,GAAGL,oBAAoB;EACnC;AACF;AACA,MAAMgB,OAAO,GAAGA,CAACC,IAAI,EAAEC,EAAE,EAAEd,MAAM,KAAK;EACpC,IAAI,CAACa,IAAI,EAAE;IACT,OAAO,KAAK;EACd;EACA,IAAIA,IAAI,CAACd,SAAS,KAAKe,EAAE,EAAE;IACzB,OAAO,KAAK;EACd;EACA,OAAOhC,qBAAqB,CAAC+B,IAAI,CAACb,MAAM,EAAEA,MAAM,CAAC;AACnD,CAAC;AACD,MAAMe,aAAa,GAAGA,CAACC,IAAI,EAAEhB,MAAM,KAAK;EACtC,IAAI,CAACgB,IAAI,EAAE;IACT,OAAO,IAAI;EACb;EACA,IAAIA,IAAI,YAAYnB,cAAc,EAAE;IAClC,OAAOmB,IAAI;EACb;EACA,OAAO,IAAInB,cAAc,CAACmB,IAAI,EAAEhB,MAAM,CAAC;AACzC,CAAC;AACD,MAAMiB,cAAc,GAAIC,KAAK,IAAK;EAChC,OAAOA,KAAK,CACTC,GAAG,CAAEH,IAAI,IAAK;IACf,IAAIA,IAAI,YAAYnB,cAAc,EAAE;MAClC,OAAOmB,IAAI;IACb;IACA,IAAI,WAAW,IAAIA,IAAI,EAAE;MACvB,OAAOD,aAAa,CAACC,IAAI,CAACjB,SAAS,EAAEiB,IAAI,CAACI,cAAc,KAAK,IAAI,GAAGT,SAAS,GAAGK,IAAI,CAACI,cAAc,CAAC;IACtG;IACA,OAAOL,aAAa,CAACC,IAAI,EAAEL,SAAS,CAAC;EACvC,CAAC,CAAC,CACCU,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAK,IAAI,CAAC;AAC9B,CAAC;AAED,MAAMC,MAAM,GAAG,4GAA4G;AAE3H,MAAMC,GAAG,GAAG,aAAcxD,kBAAkB,CAAC,MAAMwD,GAAG,SAASvD,WAAW,CAAC;EACzE6B,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAAC2B,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,cAAc,GAAGzD,WAAW,CAAC,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAC5D,IAAI,CAAC0D,gBAAgB,GAAG1D,WAAW,CAAC,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;IAChE,IAAI,CAAC2D,eAAe,GAAG3D,WAAW,CAAC,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;IAC9D,IAAI,CAAC4D,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAAC9B,QAAQ,GAAGM,SAAS;IACzB,IAAI,CAACyB,YAAY,GAAGzB,SAAS;IAC7B,IAAI,CAAC0B,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,SAAS,GAAG3B,SAAS;IAC1B,IAAI,CAAC4B,UAAU,GAAG5B,SAAS;IAC3B,IAAI,CAAC6B,IAAI,GAAG7B,SAAS;EACvB;EACA8B,mBAAmBA,CAAA,EAAG;IACpB,IAAI,IAAI,CAACC,OAAO,EAAE;MAChB,IAAI,CAACA,OAAO,CAACC,MAAM,CAAC,IAAI,CAACP,YAAY,KAAK,IAAI,CAAC;IACjD;EACF;EACAQ,WAAWA,CAAA,EAAG;IACZ,MAAMC,KAAK,GAAGzE,KAAK,CAACyE,KAAK;IACzB,IAAI,IAAI,CAACL,IAAI,KAAK7B,SAAS,EAAE;MAC3B,IAAI,CAAC,IAAI,CAACqB,SAAS,EAAE;QACnB,IAAI,CAACc,OAAO,CAAC,IAAI,CAACN,IAAI,EAAE,IAAI,CAACD,UAAU,CAAC;MAC1C,CAAC,MACI,IAAIM,KAAK,EAAE;QACdE,OAAO,CAACC,IAAI,CAAC,oEAAoE,CAAC;MACpF;IACF;EACF;EACAC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACjB,SAAS,GAAGkB,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,IAAI,CAACC,EAAE,CAACC,OAAO,CAAC,aAAa,CAAC,KAAK,IAAI;IACzG,IAAI,IAAI,CAACjB,YAAY,KAAKzB,SAAS,EAAE;MACnC,MAAM2C,IAAI,GAAGhF,UAAU,CAAC,IAAI,CAAC;MAC7B,IAAI,CAAC8D,YAAY,GAAG5D,MAAM,CAAC+E,UAAU,CAAC,kBAAkB,EAAED,IAAI,KAAK,KAAK,CAAC;IAC3E;IACA,IAAI,CAAC3B,cAAc,CAAC6B,IAAI,CAAC,CAAC;EAC5B;EACA,MAAMC,gBAAgBA,CAAA,EAAG;IACvB,IAAI,CAACb,WAAW,CAAC,CAAC;IAClB,IAAI,CAACF,OAAO,GAAG,CAAC,MAAM,MAAM,CAAC,iBAAiB,CAAC,EAAEgB,sBAAsB,CAAC,IAAI,CAACN,EAAE,EAAE,IAAI,CAACO,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACC,OAAO,CAACD,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACE,MAAM,CAACF,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACG,KAAK,CAACH,IAAI,CAAC,IAAI,CAAC,CAAC;IAClL,IAAI,CAACnB,mBAAmB,CAAC,CAAC;EAC5B;EACAuB,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAAC9B,SAAS,GAAG,KAAK;EACxB;EACA+B,oBAAoBA,CAAA,EAAG;IACrB,KAAK,MAAMpD,IAAI,IAAI,IAAI,CAACsB,KAAK,EAAE;MAC7BnD,SAAS,CAAC6B,IAAI,CAACT,OAAO,EAAEf,qBAAqB,CAAC;MAC9CwB,IAAI,CAACP,QAAQ,CAAC,CAAC;IACjB;IACA;IACA,IAAI,IAAI,CAACoC,OAAO,EAAE;MAChB,IAAI,CAACA,OAAO,CAACwB,OAAO,CAAC,CAAC;MACtB,IAAI,CAACxB,OAAO,GAAG/B,SAAS;IAC1B;IACA,IAAI,CAACmB,UAAU,CAACqC,MAAM,GAAG,CAAC;IAC1B,IAAI,CAAChC,KAAK,CAACgC,MAAM,GAAG,CAAC;IACrB,IAAI,CAACjC,SAAS,GAAG,IAAI;EACvB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEkC,IAAIA,CAACrE,SAAS,EAAEqB,cAAc,EAAEiD,IAAI,EAAEC,IAAI,EAAE;IAC1C,OAAO,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,EAAExE,SAAS,EAAEqB,cAAc,EAAEiD,IAAI,EAAEC,IAAI,CAAC;EAC/D;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAMA,CAACC,WAAW,EAAEzE,SAAS,EAAEqB,cAAc,EAAEiD,IAAI,EAAEC,IAAI,EAAE;IACzD,OAAO,IAAI,CAACG,WAAW,CAACD,WAAW,EAAE,CAAC;MAAEzE,SAAS;MAAEqB;IAAe,CAAC,CAAC,EAAEiD,IAAI,EAAEC,IAAI,CAAC;EACnF;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,WAAWA,CAACD,WAAW,EAAEE,gBAAgB,EAAEL,IAAI,EAAEC,IAAI,EAAE;IACrD,OAAO,IAAI,CAACK,SAAS,CAAC;MACpBC,WAAW,EAAEJ,WAAW;MACxBK,WAAW,EAAEH,gBAAgB;MAC7BL;IACF,CAAC,EAAEC,IAAI,CAAC;EACV;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACEQ,GAAGA,CAACT,IAAI,EAAEC,IAAI,EAAE;IACd,OAAO,IAAI,CAACS,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,EAAEV,IAAI,EAAEC,IAAI,CAAC;EAC5C;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACEU,KAAKA,CAACC,eAAe,EAAEZ,IAAI,EAAEC,IAAI,EAAE;IACjC,MAAMY,EAAE,GAAG;MACTC,WAAW,EAAE,CAAC,CAAC;MACfC,WAAW,EAAE,CAAC,CAAC;MACff;IACF,CAAC;IACD,IAAI,OAAOY,eAAe,KAAK,QAAQ,IAAIA,eAAe,CAAClF,SAAS,EAAE;MACpEmF,EAAE,CAACG,UAAU,GAAGJ,eAAe;MAC/BC,EAAE,CAACC,WAAW,GAAG,CAAC;IACpB,CAAC,MACI,IAAI,OAAOF,eAAe,KAAK,QAAQ,EAAE;MAC5CC,EAAE,CAACC,WAAW,GAAGF,eAAe,GAAG,CAAC;IACtC;IACA,OAAO,IAAI,CAACN,SAAS,CAACO,EAAE,EAAEZ,IAAI,CAAC;EACjC;EACA;AACF;AACA;AACA;AACA;AACA;EACEgB,SAASA,CAACjB,IAAI,EAAEC,IAAI,EAAE;IACpB,OAAO,IAAI,CAACS,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEV,IAAI,EAAEC,IAAI,CAAC;EAC5C;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACES,WAAWA,CAACQ,UAAU,EAA+B;IAAA,IAA7BH,WAAW,GAAAI,SAAA,CAAArB,MAAA,QAAAqB,SAAA,QAAA7E,SAAA,GAAA6E,SAAA,MAAG,CAAC;IAAA,IAAEnB,IAAI,GAAAmB,SAAA,CAAArB,MAAA,OAAAqB,SAAA,MAAA7E,SAAA;IAAA,IAAE2D,IAAI,GAAAkB,SAAA,CAAArB,MAAA,OAAAqB,SAAA,MAAA7E,SAAA;IACjD,OAAO,IAAI,CAACgE,SAAS,CAAC;MACpBQ,WAAW,EAAEI,UAAU;MACvBH,WAAW;MACXf;IACF,CAAC,EAAEC,IAAI,CAAC;EACV;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACExB,OAAOA,CAAC/C,SAAS,EAAEqB,cAAc,EAAEiD,IAAI,EAAEC,IAAI,EAAE;IAC7C,OAAO,IAAI,CAACmB,QAAQ,CAAC,CAAC;MAAE1F,SAAS;MAAEqB;IAAe,CAAC,CAAC,EAAEiD,IAAI,EAAEC,IAAI,CAAC;EACnE;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEmB,QAAQA,CAACtD,KAAK,EAAEkC,IAAI,EAAEC,IAAI,EAAE;IAC1BD,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAIA,IAAI,GAAG,CAAC,CAAE;IACrD;IACA,IAAIA,IAAI,CAAChC,QAAQ,KAAK,IAAI,EAAE;MAC1BgC,IAAI,CAAChC,QAAQ,GAAG,KAAK;IACvB;IACA,OAAO,IAAI,CAACsC,SAAS,CAAC;MACpBC,WAAW,EAAE,CAAC;MACdC,WAAW,EAAE1C,KAAK;MAClBgD,WAAW,EAAE,CAAC;MACdC,WAAW,EAAE,CAAC,CAAC;MACff;IACF,CAAC,EAAEC,IAAI,CAAC;EACV;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoB,UAAUA,CAAC5E,EAAE,EAAEd,MAAM,EAAE2F,SAAS,EAAErD,SAAS,EAAE;IAC3C,MAAMsD,MAAM,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;IACnC,IAAIjF,OAAO,CAACgF,MAAM,EAAE9E,EAAE,EAAEd,MAAM,CAAC,EAAE;MAC/B,OAAO8F,OAAO,CAACC,OAAO,CAAC;QACrBC,OAAO,EAAE,KAAK;QACd5F,OAAO,EAAEwF,MAAM,CAACxF;MAClB,CAAC,CAAC;IACJ;IACA,IAAI2F,OAAO;IACX,MAAME,OAAO,GAAG,IAAIH,OAAO,CAAEI,CAAC,IAAMH,OAAO,GAAGG,CAAE,CAAC;IACjD,IAAIC,MAAM;IACV,MAAMC,UAAU,GAAG;MACjBC,SAAS,EAAE,KAAK;MAChBC,WAAW,EAAGC,UAAU,IAAK;QAC3B,IAAIC,IAAI;QACR,MAAM7H,CAAC,GAAG,IAAImH,OAAO,CAAEI,CAAC,IAAMM,IAAI,GAAGN,CAAE,CAAC;QACxCH,OAAO,CAAC;UACNC,OAAO,EAAE,IAAI;UACb5F,OAAO,EAAEmG,UAAU;UACnBE,WAAW,EAAE,MAAAA,CAAA,KAAY;YACvBD,IAAI,CAAC,CAAC;YACN,MAAML,MAAM;UACd;QACF,CAAC,CAAC;QACF,OAAOxH,CAAC;MACV;IACF,CAAC;IACD,IAAIgH,SAAS,KAAK,MAAM,EAAE;MACxBQ,MAAM,GAAG,IAAI,CAACrD,OAAO,CAAChC,EAAE,EAAEd,MAAM,EAAEoG,UAAU,CAAC;IAC/C,CAAC,MACI;MACH;MACA,MAAMM,cAAc,GAAG,IAAI,CAACvE,KAAK,CAACwE,IAAI,CAAErF,CAAC,IAAKV,OAAO,CAACU,CAAC,EAAER,EAAE,EAAEd,MAAM,CAAC,CAAC;MACrE,IAAI0G,cAAc,EAAE;QAClBP,MAAM,GAAG,IAAI,CAACnB,KAAK,CAAC0B,cAAc,EAAEE,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAET,UAAU,CAAC,EAAE;UAAET,SAAS,EAAE,MAAM;UAAEmB,gBAAgB,EAAExE;QAAU,CAAC,CAAC,CAAC;MACvI,CAAC,MACI,IAAIqD,SAAS,KAAK,SAAS,EAAE;QAChCQ,MAAM,GAAG,IAAI,CAAC/B,IAAI,CAACtD,EAAE,EAAEd,MAAM,EAAE4G,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAET,UAAU,CAAC,EAAE;UAAEU,gBAAgB,EAAExE;QAAU,CAAC,CAAC,CAAC;MAC/G,CAAC,MACI,IAAIqD,SAAS,KAAK,MAAM,EAAE;QAC7BQ,MAAM,GAAG,IAAI,CAACrD,OAAO,CAAChC,EAAE,EAAEd,MAAM,EAAE4G,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAET,UAAU,CAAC,EAAE;UAAET,SAAS,EAAE,MAAM;UAAEtD,QAAQ,EAAE,IAAI;UAAEyE,gBAAgB,EAAExE;QAAU,CAAC,CAAC,CAAC;MACrJ;IACF;IACA,OAAO2D,OAAO;EAChB;EACA;AACF;AACA;AACA;AACA;EACE,MAAMc,UAAUA,CAAA,EAAG;IACjB,MAAMnB,MAAM,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC;IACnC,IAAID,MAAM,EAAE;MACV,OAAO;QACL9E,EAAE,EAAE8E,MAAM,CAACxF,OAAO,CAAC4G,OAAO;QAC1BhH,MAAM,EAAE4F,MAAM,CAAC5F,MAAM;QACrBI,OAAO,EAAEwF,MAAM,CAACxF;MAClB,CAAC;IACH;IACA,OAAOO,SAAS;EAClB;EACA;AACF;AACA;EACE,MAAMsG,SAASA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACpB,aAAa,CAAC,CAAC;EAC7B;EACA;AACF;AACA;AACA;AACA;EACE,MAAMqB,UAAUA,CAACC,KAAK,EAAE;IACtB,OAAO,IAAI,CAAChF,KAAK,CAACgF,KAAK,CAAC;EAC1B;EACA;AACF;AACA;AACA;AACA;EACE,MAAMC,SAASA,CAACvG,IAAI,EAAE;IACpB,OAAO,IAAI,CAACwG,aAAa,CAACxG,IAAI,CAAC;EACjC;EACA;AACF;AACA;AACA;AACA;EACE,MAAMyG,WAAWA,CAACzG,IAAI,EAAE;IACtB,OAAO,IAAI,CAAC0G,eAAe,CAAC1G,IAAI,CAAC;EACnC;EACA2G,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACrF,KAAK,CAACgC,MAAM;EAC1B;EACA0B,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAAC1D,KAAK,CAAC,IAAI,CAACA,KAAK,CAACgC,MAAM,GAAG,CAAC,CAAC;EAC1C;EACAkD,aAAaA,CAAA,EAA8B;IAAA,IAA7BxG,IAAI,GAAA2E,SAAA,CAAArB,MAAA,QAAAqB,SAAA,QAAA7E,SAAA,GAAA6E,SAAA,MAAG,IAAI,CAACK,aAAa,CAAC,CAAC;IACvC,OAAO,CAAC,EAAEhF,IAAI,IAAI,IAAI,CAAC0G,eAAe,CAAC1G,IAAI,CAAC,CAAC;EAC/C;EACA0G,eAAeA,CAAA,EAA8B;IAAA,IAA7B1G,IAAI,GAAA2E,SAAA,CAAArB,MAAA,QAAAqB,SAAA,QAAA7E,SAAA,GAAA6E,SAAA,MAAG,IAAI,CAACK,aAAa,CAAC,CAAC;IACzC,IAAI,CAAChF,IAAI,EAAE;MACT,OAAOF,SAAS;IAClB;IACA,MAAMwB,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAMgF,KAAK,GAAGhF,KAAK,CAACsF,OAAO,CAAC5G,IAAI,CAAC;IACjC,OAAOsG,KAAK,GAAG,CAAC,GAAGhF,KAAK,CAACgF,KAAK,GAAG,CAAC,CAAC,GAAGxG,SAAS;EACjD;EACA;AACF;AACA;AACA;AACA;EACE,MAAMgE,SAASA,CAACO,EAAE,EAAEZ,IAAI,EAAE;IACxB,IAAIoD,EAAE,EAAEC,EAAE;IACV,IAAI,IAAI,CAAC1F,eAAe,KAAK,CAACyF,EAAE,GAAGxC,EAAE,CAACb,IAAI,MAAM,IAAI,IAAIqD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,UAAU,CAAC,EAAE;MAC/F,OAAO,KAAK;IACd;IACA,MAAM3B,OAAO,GAAG,IAAIH,OAAO,CAAC,CAACC,OAAO,EAAE8B,MAAM,KAAK;MAC/C3C,EAAE,CAACa,OAAO,GAAGA,OAAO;MACpBb,EAAE,CAAC2C,MAAM,GAAGA,MAAM;IACpB,CAAC,CAAC;IACF3C,EAAE,CAACZ,IAAI,GAAGA,IAAI;IACd;AACJ;AACA;AACA;AACA;AACA;IACI,IAAIY,EAAE,CAACb,IAAI,IAAIa,EAAE,CAACb,IAAI,CAACgC,SAAS,KAAK,KAAK,IAAI,IAAI,CAACrE,SAAS,EAAE;MAC5D,MAAM8F,MAAM,GAAG5E,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;MACnD,IAAI2E,MAAM,EAAE;QACV,MAAMC,aAAa,GAAG,MAAMD,MAAM,CAACC,aAAa,CAAC,CAAC;QAClD,IAAIA,aAAa,KAAK,KAAK,EAAE;UAC3B,OAAO,KAAK;QACd;QACA,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;UACrCD,MAAM,CAAC1D,IAAI,CAAC2D,aAAa,EAAE7C,EAAE,CAACb,IAAI,CAACsB,SAAS,IAAI,MAAM,CAAC;UACvD,OAAO,KAAK;QACd;MACF;IACF;IACA;IACA,IAAI,CAAC,CAACgC,EAAE,GAAGzC,EAAE,CAACL,WAAW,MAAM,IAAI,IAAI8C,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACxD,MAAM,MAAM,CAAC,EAAE;MAChFe,EAAE,CAACL,WAAW,GAAGlE,SAAS;IAC5B;IACA;IACA,IAAI,CAACmB,UAAU,CAACsC,IAAI,CAACc,EAAE,CAAC;IACxB;IACA;IACA,IAAI,CAAC8C,QAAQ,CAAC,CAAC;IACf,OAAO/B,OAAO;EAChB;EACAgC,OAAOA,CAACC,MAAM,EAAEhD,EAAE,EAAE;IAClB,IAAI,IAAI,CAAChD,SAAS,EAAE;MAClB,IAAI,CAACiG,SAAS,CAAC,8BAA8B,EAAEjD,EAAE,CAAC;MAClD;IACF;IACA,IAAIA,EAAE,CAACZ,IAAI,EAAE;MACXY,EAAE,CAACZ,IAAI,CAAC4D,MAAM,CAACE,YAAY,EAAEF,MAAM,CAACG,kBAAkB,EAAEH,MAAM,CAACI,YAAY,EAAEJ,MAAM,CAACK,WAAW,EAAEL,MAAM,CAACvC,SAAS,CAAC;IACpH;IACAT,EAAE,CAACa,OAAO,CAACmC,MAAM,CAACE,YAAY,CAAC;IAC/B,IAAIlD,EAAE,CAACb,IAAI,CAACgC,SAAS,KAAK,KAAK,IAAI,IAAI,CAACrE,SAAS,EAAE;MACjD,MAAM8F,MAAM,GAAG5E,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;MACnD,IAAI2E,MAAM,EAAE;QACV,MAAMnC,SAAS,GAAGuC,MAAM,CAACvC,SAAS,KAAK,MAAM,GAAG,MAAM,GAAG,SAAS;QAClEmC,MAAM,CAACU,UAAU,CAAC7C,SAAS,CAAC;MAC9B;IACF;EACF;EACA8C,MAAMA,CAACC,YAAY,EAAExD,EAAE,EAAE;IACvB,IAAI,IAAI,CAAChD,SAAS,EAAE;MAClB,IAAI,CAACiG,SAAS,CAAC,8BAA8B,EAAEjD,EAAE,CAAC;MAClD;IACF;IACA,IAAI,CAACpD,UAAU,CAACqC,MAAM,GAAG,CAAC;IAC1B,IAAI,CAACgE,SAAS,CAACO,YAAY,EAAExD,EAAE,CAAC;EAClC;EACAiD,SAASA,CAACO,YAAY,EAAExD,EAAE,EAAE;IAC1B,IAAIA,EAAE,CAACZ,IAAI,EAAE;MACXY,EAAE,CAACZ,IAAI,CAAC,KAAK,EAAE,KAAK,EAAEoE,YAAY,CAAC;IACrC;IACA,IAAIxD,EAAE,CAAC2C,MAAM,IAAI,CAAC,IAAI,CAAC3F,SAAS,EAAE;MAChCgD,EAAE,CAAC2C,MAAM,CAACa,YAAY,CAAC;IACzB,CAAC,MACI;MACHxD,EAAE,CAACa,OAAO,CAAC,KAAK,CAAC;IACnB;EACF;EACA;AACF;AACA;AACA;AACA;EACEiC,QAAQA,CAAA,EAAG;IACT;IACA;IACA,IAAI,IAAI,CAAC/F,eAAe,EAAE;MACxB,OAAO,KAAK;IACd;IACA;IACA,MAAMiD,EAAE,GAAG,IAAI,CAACpD,UAAU,CAAC6G,KAAK,CAAC,CAAC;IAClC,IAAI,CAACzD,EAAE,EAAE;MACP,OAAO,KAAK;IACd;IACA,IAAI,CAAC0D,aAAa,CAAC1D,EAAE,CAAC;IACtB,OAAO,IAAI;EACb;EACA;EACA,MAAM0D,aAAaA,CAAC1D,EAAE,EAAE;IACtB,IAAI;MACF;MACA,IAAI,CAACtD,gBAAgB,CAAC4B,IAAI,CAAC,CAAC;MAC5B,IAAI,CAACvB,eAAe,GAAG,IAAI;MAC3B,IAAI,CAAC4G,SAAS,CAAC3D,EAAE,CAAC;MAClB,MAAMqD,WAAW,GAAG,IAAI,CAAC1C,aAAa,CAAC,CAAC;MACxC,MAAMyC,YAAY,GAAG,IAAI,CAACQ,eAAe,CAAC5D,EAAE,EAAEqD,WAAW,CAAC;MAC1D,IAAI,CAACA,WAAW,IAAI,CAACD,YAAY,EAAE;QACjC,MAAM,IAAIS,KAAK,CAAC,qCAAqC,CAAC;MACxD;MACA,IAAIT,YAAY,IAAIA,YAAY,CAACrI,KAAK,KAAKP,cAAc,EAAE;QACzD,MAAM4I,YAAY,CAACpI,IAAI,CAAC,IAAI,CAACkD,EAAE,CAAC;MAClC;MACA,IAAI,CAAC4F,YAAY,CAACV,YAAY,EAAEC,WAAW,EAAErD,EAAE,CAAC;MAChD;MACA,MAAMmD,kBAAkB,GAAG,CAACnD,EAAE,CAAC+D,0BAA0B,IAAI/D,EAAE,CAACgE,yBAAyB,KAAKZ,YAAY,KAAKC,WAAW;MAC1H,IAAIF,kBAAkB,IAAInD,EAAE,CAACb,IAAI,IAAIkE,WAAW,EAAE;QAChD,MAAMY,eAAe,GAAGjE,EAAE,CAACb,IAAI,CAACsB,SAAS,KAAK,MAAM;QACpD;AACR;AACA;AACA;QACQ,IAAIwD,eAAe,EAAE;UACnBjE,EAAE,CAACb,IAAI,CAACyC,gBAAgB,GAAG5B,EAAE,CAACb,IAAI,CAACyC,gBAAgB,KAAKwB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACxB,gBAAgB,CAAC;QACpJ;QACAyB,WAAW,CAACzB,gBAAgB,GAAG5B,EAAE,CAACb,IAAI,CAACyC,gBAAgB;MACzD;MACA,IAAIoB,MAAM;MACV,IAAIG,kBAAkB,EAAE;QACtBH,MAAM,GAAG,MAAM,IAAI,CAAChJ,UAAU,CAACoJ,YAAY,EAAEC,WAAW,EAAErD,EAAE,CAAC;MAC/D,CAAC,MACI;QACH;QACA;QACA;QACA;QACAgD,MAAM,GAAG;UACPE,YAAY,EAAE,IAAI;UAClBC,kBAAkB,EAAE;QACtB,CAAC;MACH;MACA,IAAI,CAACJ,OAAO,CAACC,MAAM,EAAEhD,EAAE,CAAC;MACxB,IAAI,CAACrD,eAAe,CAAC2B,IAAI,CAAC,CAAC;IAC7B,CAAC,CACD,OAAOkF,YAAY,EAAE;MACnB,IAAI,CAACD,MAAM,CAACC,YAAY,EAAExD,EAAE,CAAC;IAC/B;IACA,IAAI,CAACjD,eAAe,GAAG,KAAK;IAC5B,IAAI,CAAC+F,QAAQ,CAAC,CAAC;EACjB;EACAa,SAASA,CAAC3D,EAAE,EAAE;IACZ,IAAIwC,EAAE,EAAEC,EAAE;IACV,IAAIyB,EAAE;IACN,MAAMC,WAAW,GAAG,IAAI,CAAClH,KAAK,CAACgC,MAAM;IACrC,CAACuD,EAAE,GAAGxC,EAAE,CAACb,IAAI,MAAM,IAAI,IAAIqD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAIxC,EAAE,CAACb,IAAI,GAAG,CAAC,CAAE;IAC9D,CAACsD,EAAE,GAAG,CAACyB,EAAE,GAAGlE,EAAE,CAACb,IAAI,EAAEhE,QAAQ,MAAM,IAAI,IAAIsH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAIyB,EAAE,CAAC/I,QAAQ,GAAG,IAAI,CAACA,QAAS;IAC7F,IAAI6E,EAAE,CAACG,UAAU,KAAK1E,SAAS,EAAE;MAC/B/B,MAAM,CAACsG,EAAE,CAACC,WAAW,KAAKxE,SAAS,EAAE,8BAA8B,CAAC;MACpE/B,MAAM,CAACsG,EAAE,CAACE,WAAW,KAAKzE,SAAS,EAAE,8BAA8B,CAAC;MACpE,MAAMwG,KAAK,GAAG,IAAI,CAAChF,KAAK,CAACsF,OAAO,CAACvC,EAAE,CAACG,UAAU,CAAC;MAC/C,IAAI8B,KAAK,GAAG,CAAC,EAAE;QACb,MAAM,IAAI4B,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MACA7D,EAAE,CAACC,WAAW,IAAIgC,KAAK;IACzB;IACA,IAAIjC,EAAE,CAACC,WAAW,KAAKxE,SAAS,EAAE;MAChC,IAAIuE,EAAE,CAACC,WAAW,GAAG,CAAC,EAAE;QACtBD,EAAE,CAACC,WAAW,GAAGkE,WAAW,GAAG,CAAC;MAClC;MACA,IAAInE,EAAE,CAACE,WAAW,GAAG,CAAC,EAAE;QACtBF,EAAE,CAACE,WAAW,GAAGiE,WAAW,GAAGnE,EAAE,CAACC,WAAW;MAC/C;MACAD,EAAE,CAACgE,yBAAyB,GAAGhE,EAAE,CAACE,WAAW,GAAG,CAAC,IAAIF,EAAE,CAACC,WAAW,GAAGD,EAAE,CAACE,WAAW,KAAKiE,WAAW;IACtG;IACA,IAAInE,EAAE,CAACL,WAAW,EAAE;MAClB;MACA;MACA,IAAIK,EAAE,CAACN,WAAW,GAAG,CAAC,IAAIM,EAAE,CAACN,WAAW,GAAGyE,WAAW,EAAE;QACtDnE,EAAE,CAACN,WAAW,GAAGyE,WAAW;MAC9B;MACAnE,EAAE,CAAC+D,0BAA0B,GAAG/D,EAAE,CAACN,WAAW,KAAKyE,WAAW;IAChE;IACA,MAAMxE,WAAW,GAAGK,EAAE,CAACL,WAAW;IAClC,IAAI,CAACA,WAAW,EAAE;MAChB;IACF;IACAjG,MAAM,CAACiG,WAAW,CAACV,MAAM,GAAG,CAAC,EAAE,wBAAwB,CAAC;IACxD,MAAMmF,eAAe,GAAGrI,cAAc,CAAC4D,WAAW,CAAC;IACnD,IAAIyE,eAAe,CAACnF,MAAM,KAAK,CAAC,EAAE;MAChC,MAAM,IAAI4E,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IACA;IACA,KAAK,MAAMlI,IAAI,IAAIyI,eAAe,EAAE;MAClCzI,IAAI,CAACR,QAAQ,GAAG6E,EAAE,CAACb,IAAI,CAAChE,QAAQ;MAChC,MAAMK,GAAG,GAAGG,IAAI,CAACH,GAAG;MACpB,IAAIA,GAAG,IAAIA,GAAG,KAAK,IAAI,EAAE;QACvB,MAAM,IAAIqI,KAAK,CAAC,oCAAoC,CAAC;MACvD;MACA,IAAIlI,IAAI,CAACZ,KAAK,KAAKL,oBAAoB,EAAE;QACvC,MAAM,IAAImJ,KAAK,CAAC,qCAAqC,CAAC;MACxD;IACF;IACA7D,EAAE,CAACL,WAAW,GAAGyE,eAAe;EAClC;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACER,eAAeA,CAAC5D,EAAE,EAAEqD,WAAW,EAAE;IAC/B;IACA,MAAM1D,WAAW,GAAGK,EAAE,CAACL,WAAW;IAClC,IAAIA,WAAW,KAAKlE,SAAS,EAAE;MAC7B,OAAOkE,WAAW,CAACA,WAAW,CAACV,MAAM,GAAG,CAAC,CAAC;IAC5C;IACA;IACA,MAAMgB,WAAW,GAAGD,EAAE,CAACC,WAAW;IAClC,IAAIA,WAAW,KAAKxE,SAAS,EAAE;MAC7B,MAAMwB,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,MAAMoH,SAAS,GAAGpE,WAAW,GAAGD,EAAE,CAACE,WAAW;MAC9C,KAAK,IAAIoE,CAAC,GAAGrH,KAAK,CAACgC,MAAM,GAAG,CAAC,EAAEqF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC1C,MAAM3I,IAAI,GAAGsB,KAAK,CAACqH,CAAC,CAAC;QACrB,IAAI,CAACA,CAAC,GAAGrE,WAAW,IAAIqE,CAAC,IAAID,SAAS,KAAK1I,IAAI,KAAK0H,WAAW,EAAE;UAC/D,OAAO1H,IAAI;QACb;MACF;IACF;IACA,OAAOF,SAAS;EAClB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACEqI,YAAYA,CAACV,YAAY,EAAEC,WAAW,EAAErD,EAAE,EAAE;IAC1C,IAAIwC,EAAE,EAAEC,EAAE,EAAEyB,EAAE;IACdxK,MAAM,CAAC2J,WAAW,IAAID,YAAY,EAAE,4CAA4C,CAAC;IACjF1J,MAAM,CAACsG,EAAE,CAACa,OAAO,EAAE,uBAAuB,CAAC;IAC3CnH,MAAM,CAACsG,EAAE,CAAC2C,MAAM,EAAE,sBAAsB,CAAC;IACzC;IACA,MAAMxD,IAAI,GAAGa,EAAE,CAACb,IAAI;IACpB,MAAM;MAAEQ,WAAW;MAAEM,WAAW;MAAEC;IAAY,CAAC,GAAGF,EAAE;IACpD;IACA,IAAIuE,YAAY;IAChB;IACA,IAAItE,WAAW,KAAKxE,SAAS,IAAIyE,WAAW,KAAKzE,SAAS,EAAE;MAC1D/B,MAAM,CAACuG,WAAW,IAAI,CAAC,EAAE,iCAAiC,CAAC;MAC3DvG,MAAM,CAACwG,WAAW,IAAI,CAAC,EAAE,iCAAiC,CAAC;MAC3DqE,YAAY,GAAG,EAAE;MACjB,KAAK,IAAID,CAAC,GAAGrE,WAAW,EAAEqE,CAAC,GAAGrE,WAAW,GAAGC,WAAW,EAAEoE,CAAC,EAAE,EAAE;QAC5D,MAAM3I,IAAI,GAAG,IAAI,CAACsB,KAAK,CAACqH,CAAC,CAAC;QAC1B,IAAI3I,IAAI,KAAKF,SAAS,IAAIE,IAAI,KAAKyH,YAAY,IAAIzH,IAAI,KAAK0H,WAAW,EAAE;UACvEkB,YAAY,CAACrF,IAAI,CAACvD,IAAI,CAAC;QACzB;MACF;MACA;MACA,CAAC6G,EAAE,GAAGrD,IAAI,CAACsB,SAAS,MAAM,IAAI,IAAI+B,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAIrD,IAAI,CAACsB,SAAS,GAAG,MAAO;IAClF;IACA,MAAM+D,aAAa,GAAG,IAAI,CAACvH,KAAK,CAACgC,MAAM,IAAI,CAACwD,EAAE,GAAG9C,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACV,MAAM,MAAM,IAAI,IAAIwD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC,IAAIvC,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAGA,WAAW,GAAG,CAAC,CAAC;IACvOxG,MAAM,CAAC8K,aAAa,IAAI,CAAC,EAAE,mCAAmC,CAAC;IAC/D,IAAIA,aAAa,KAAK,CAAC,EAAE;MACvB3G,OAAO,CAACC,IAAI,CAAE,sGAAqG,EAAE,IAAI,EAAE,IAAI,CAACI,EAAE,CAAC;MACnI,MAAM,IAAI2F,KAAK,CAAC,+CAA+C,CAAC;IAClE;IACA;IACA;IACA,IAAIlE,WAAW,EAAE;MACf;MACA,IAAIL,WAAW,GAAGU,EAAE,CAACN,WAAW;MAChC,KAAK,MAAM/D,IAAI,IAAIgE,WAAW,EAAE;QAC9B,IAAI,CAAC8E,YAAY,CAAC9I,IAAI,EAAE2D,WAAW,CAAC;QACpCA,WAAW,EAAE;MACf;MACA,IAAIU,EAAE,CAAC+D,0BAA0B,EAAE;QACjC;QACA,CAACG,EAAE,GAAG/E,IAAI,CAACsB,SAAS,MAAM,IAAI,IAAIyD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAI/E,IAAI,CAACsB,SAAS,GAAG,SAAU;MACrF;IACF;IACA;IACA;IACA;IACA;IACA;IACA,IAAI8D,YAAY,IAAIA,YAAY,CAACtF,MAAM,GAAG,CAAC,EAAE;MAC3C,KAAK,MAAMtD,IAAI,IAAI4I,YAAY,EAAE;QAC/BzK,SAAS,CAAC6B,IAAI,CAACT,OAAO,EAAEd,oBAAoB,CAAC;QAC7CN,SAAS,CAAC6B,IAAI,CAACT,OAAO,EAAEb,mBAAmB,CAAC;QAC5CP,SAAS,CAAC6B,IAAI,CAACT,OAAO,EAAEf,qBAAqB,CAAC;MAChD;MACA;MACA,KAAK,MAAMwB,IAAI,IAAI4I,YAAY,EAAE;QAC/B,IAAI,CAACG,WAAW,CAAC/I,IAAI,CAAC;MACxB;IACF;EACF;EACA,MAAM3B,UAAUA,CAACoJ,YAAY,EAAEC,WAAW,EAAErD,EAAE,EAAE;IAC9C;IACA;IACA,MAAMb,IAAI,GAAGa,EAAE,CAACb,IAAI;IACpB,MAAMwF,gBAAgB,GAAGxF,IAAI,CAACyF,iBAAiB,GAAIC,GAAG,IAAM,IAAI,CAACC,KAAK,GAAGD,GAAI,GAAGpJ,SAAS;IACzF,MAAM2C,IAAI,GAAGhF,UAAU,CAAC,IAAI,CAAC;IAC7B,MAAMiI,UAAU,GAAG+B,YAAY,CAAClI,OAAO;IACvC,MAAM6J,SAAS,GAAG1B,WAAW,IAAIA,WAAW,CAACnI,OAAO;IACpD,MAAM8J,aAAa,GAAGtD,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC;MAAEvD,IAAI;MAAE6G,UAAU,EAAE,IAAI,CAAC9C,aAAa,CAACiB,YAAY,CAAC;MAAE8B,MAAM,EAAE,IAAI,CAAChH,EAAE;MAAEyG,gBAAgB;MAAExH,QAAQ,EAAE,IAAI,CAACA,QAAQ,IAAI7D,MAAM,CAAC+E,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC;MAAEgD,UAAU;MACnN0D;IAAU,CAAC,EAAE5F,IAAI,CAAC,EAAE;MAAEyC,gBAAgB,EAAEzC,IAAI,CAACyC,gBAAgB,IAAI,IAAI,CAACxE,SAAS,IAAI9D,MAAM,CAAC6L,GAAG,CAAC,cAAc;IAAE,CAAC,CAAC;IAClH,MAAM;MAAEjC;IAAa,CAAC,GAAG,MAAMlJ,UAAU,CAACgL,aAAa,CAAC;IACxD,OAAO,IAAI,CAACI,gBAAgB,CAAClC,YAAY,EAAEE,YAAY,EAAEC,WAAW,EAAElE,IAAI,CAAC;EAC7E;EACAiG,gBAAgBA,CAAClC,YAAY,EAAEE,YAAY,EAAEC,WAAW,EAAElE,IAAI,EAAE;IAC9D;AACJ;AACA;AACA;IACI,MAAMkG,UAAU,GAAGnC,YAAY,GAAGE,YAAY,GAAGC,WAAW;IAC5D,IAAIgC,UAAU,EAAE;MACd,IAAI,CAACC,oBAAoB,CAACD,UAAU,CAAC;IACvC;IACA,OAAO;MACLnC,YAAY;MACZC,kBAAkB,EAAE,IAAI;MACxBC,YAAY;MACZC,WAAW;MACX5C,SAAS,EAAEtB,IAAI,CAACsB;IAClB,CAAC;EACH;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEgE,YAAYA,CAAC9I,IAAI,EAAEsG,KAAK,EAAE;IACxB,MAAMhF,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAMsI,aAAa,GAAGtI,KAAK,CAACsF,OAAO,CAAC5G,IAAI,CAAC;IACzC,IAAI4J,aAAa,GAAG,CAAC,CAAC,EAAE;MACtB7L,MAAM,CAACiC,IAAI,CAACH,GAAG,KAAK,IAAI,EAAE,6BAA6B,CAAC;MACxD;MACAyB,KAAK,CAACuI,MAAM,CAACD,aAAa,EAAE,CAAC,CAAC;MAC9B;MACAtI,KAAK,CAACuI,MAAM,CAACvD,KAAK,EAAE,CAAC,EAAEtG,IAAI,CAAC;IAC9B,CAAC,MACI;MACHjC,MAAM,CAAC,CAACiC,IAAI,CAACH,GAAG,EAAE,aAAa,CAAC;MAChC;MACA;MACAG,IAAI,CAACH,GAAG,GAAG,IAAI;MACfyB,KAAK,CAACuI,MAAM,CAACvD,KAAK,EAAE,CAAC,EAAEtG,IAAI,CAAC;IAC9B;EACF;EACA;AACF;AACA;AACA;AACA;EACEwE,UAAUA,CAACxE,IAAI,EAAE;IACfjC,MAAM,CAACiC,IAAI,CAACZ,KAAK,KAAKN,mBAAmB,IAAIkB,IAAI,CAACZ,KAAK,KAAKL,oBAAoB,EAAE,0CAA0C,CAAC;IAC7H,MAAMuC,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAMgF,KAAK,GAAGhF,KAAK,CAACsF,OAAO,CAAC5G,IAAI,CAAC;IACjCjC,MAAM,CAACuI,KAAK,GAAG,CAAC,CAAC,EAAE,gCAAgC,CAAC;IACpD,IAAIA,KAAK,IAAI,CAAC,EAAE;MACdhF,KAAK,CAACuI,MAAM,CAACvD,KAAK,EAAE,CAAC,CAAC;IACxB;EACF;EACAyC,WAAWA,CAAC/I,IAAI,EAAE;IAChBA,IAAI,CAACP,QAAQ,CAAC,CAAC;IACf,IAAI,CAAC+E,UAAU,CAACxE,IAAI,CAAC;EACvB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACE2J,oBAAoBA,CAACD,UAAU,EAAE;IAC/B;IACA;IACA;IACA,IAAI,IAAI,CAACrI,SAAS,EAAE;MAClB;IACF;IACA,MAAMC,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAMwI,eAAe,GAAGxI,KAAK,CAACsF,OAAO,CAAC8C,UAAU,CAAC;IACjD,KAAK,IAAIf,CAAC,GAAGrH,KAAK,CAACgC,MAAM,GAAG,CAAC,EAAEqF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1C,MAAM3I,IAAI,GAAGsB,KAAK,CAACqH,CAAC,CAAC;MACrB;AACN;AACA;AACA;AACA;AACA;AACA;AACA;MACM,MAAMpJ,OAAO,GAAGS,IAAI,CAACT,OAAO;MAC5B,IAAIA,OAAO,EAAE;QACX,IAAIoJ,CAAC,GAAGmB,eAAe,EAAE;UACvB;UACA;UACA3L,SAAS,CAACoB,OAAO,EAAEf,qBAAqB,CAAC;UACzC,IAAI,CAACuK,WAAW,CAAC/I,IAAI,CAAC;QACxB,CAAC,MACI,IAAI2I,CAAC,GAAGmB,eAAe,EAAE;UAC5B;UACA;UACAxL,aAAa,CAACiB,OAAO,EAAE,IAAI,CAAC;QAC9B;MACF;IACF;EACF;EACAuD,QAAQA,CAAA,EAAG;IACT,OAAQ,CAAC,CAAC,IAAI,CAACvB,YAAY,IACzB,CAAC,IAAI,CAACH,eAAe,IACrB,IAAI,CAACH,UAAU,CAACqC,MAAM,KAAK,CAAC,IAC5B,IAAI,CAACpC,gBAAgB,IACrB,IAAI,CAACsF,aAAa,CAAC,CAAC;EACxB;EACAxD,OAAOA,CAAA,EAAG;IACR,IAAI,CAACiB,GAAG,CAAC;MAAEa,SAAS,EAAE,MAAM;MAAEmE,iBAAiB,EAAE;IAAK,CAAC,CAAC;EAC1D;EACAhG,MAAMA,CAAC8G,SAAS,EAAE;IAChB,IAAI,IAAI,CAACZ,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAACa,YAAY,CAACD,SAAS,CAAC;IACpC;EACF;EACA7G,KAAKA,CAAC+G,cAAc,EAAEF,SAAS,EAAEG,GAAG,EAAE;IACpC,IAAI,IAAI,CAACf,KAAK,EAAE;MACd,IAAI,CAACjI,gBAAgB,GAAG,KAAK;MAC7B,IAAI,CAACiI,KAAK,CAACgB,QAAQ,CAAC,MAAM;QACxB,IAAI,CAACjJ,gBAAgB,GAAG,IAAI;MAC9B,CAAC,EAAE;QAAEkJ,eAAe,EAAE;MAAK,CAAC,CAAC;MAC7B;MACA,IAAIC,YAAY,GAAGJ,cAAc,GAAG,CAAC,KAAK,GAAG,KAAK;MAClD;AACN;AACA;AACA;AACA;AACA;AACA;AACA;MACM,IAAI,CAACA,cAAc,EAAE;QACnB,IAAI,CAACd,KAAK,CAACmB,MAAM,CAAC,gCAAgC,CAAC;QACnDD,YAAY,IAAIxM,uBAAuB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEkM,SAAS,CAAC,CAAC,CAAC,CAAC;MAC7F,CAAC,MACI;QACHM,YAAY,IAAIxM,uBAAuB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEkM,SAAS,CAAC,CAAC,CAAC,CAAC;MAC7F;MACA,IAAI,CAACZ,KAAK,CAACoB,WAAW,CAACN,cAAc,GAAG,CAAC,GAAG,CAAC,EAAEI,YAAY,EAAEH,GAAG,CAAC;IACnE;EACF;EACAM,MAAMA,CAAA,EAAG;IACP,OAAOlN,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC;EACxB;EACA,IAAIiF,EAAEA,CAAA,EAAG;IAAE,OAAO,IAAI;EAAE;EACxB,WAAWkI,QAAQA,CAAA,EAAG;IAAE,OAAO;MAC7B,cAAc,EAAE,CAAC,qBAAqB,CAAC;MACvC,MAAM,EAAE,CAAC,aAAa;IACxB,CAAC;EAAE;EACH,WAAWC,KAAKA,CAAA,EAAG;IAAE,OAAOhK,MAAM;EAAE;AACtC,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE;EACd,UAAU,EAAE,CAAC,EAAE,CAAC;EAChB,cAAc,EAAE,CAAC,IAAI,EAAE,eAAe,CAAC;EACvC,UAAU,EAAE,CAAC,CAAC,CAAC;EACf,WAAW,EAAE,CAAC,EAAE,CAAC;EACjB,YAAY,EAAE,CAAC,EAAE,CAAC;EAClB,MAAM,EAAE,CAAC,CAAC,CAAC;EACX,MAAM,EAAE,CAAC,EAAE,CAAC;EACZ,QAAQ,EAAE,CAAC,EAAE,CAAC;EACd,aAAa,EAAE,CAAC,EAAE,CAAC;EACnB,KAAK,EAAE,CAAC,EAAE,CAAC;EACX,OAAO,EAAE,CAAC,EAAE,CAAC;EACb,WAAW,EAAE,CAAC,EAAE,CAAC;EACjB,aAAa,EAAE,CAAC,EAAE,CAAC;EACnB,SAAS,EAAE,CAAC,EAAE,CAAC;EACf,UAAU,EAAE,CAAC,EAAE,CAAC;EAChB,YAAY,EAAE,CAAC,EAAE,CAAC;EAClB,YAAY,EAAE,CAAC,EAAE,CAAC;EAClB,WAAW,EAAE,CAAC,EAAE,CAAC;EACjB,YAAY,EAAE,CAAC,EAAE,CAAC;EAClB,WAAW,EAAE,CAAC,EAAE,CAAC;EACjB,aAAa,EAAE,CAAC,EAAE;AACpB,CAAC,CAAC,CAAC;AACL,SAASiK,qBAAqBA,CAAA,EAAG;EAC/B,IAAI,OAAOC,cAAc,KAAK,WAAW,EAAE;IACzC;EACF;EACA,MAAMC,UAAU,GAAG,CAAC,SAAS,CAAC;EAC9BA,UAAU,CAACC,OAAO,CAAC3E,OAAO,IAAI;IAAE,QAAQA,OAAO;MAC7C,KAAK,SAAS;QACZ,IAAI,CAACyE,cAAc,CAACpB,GAAG,CAACrD,OAAO,CAAC,EAAE;UAChCyE,cAAc,CAACG,MAAM,CAAC5E,OAAO,EAAExF,GAAG,CAAC;QACrC;QACA;IACJ;EAAE,CAAC,CAAC;AACN;AAEA,MAAMqK,MAAM,GAAGrK,GAAG;AAClB,MAAMsK,mBAAmB,GAAGN,qBAAqB;AAEjD,SAASK,MAAM,EAAEC,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}