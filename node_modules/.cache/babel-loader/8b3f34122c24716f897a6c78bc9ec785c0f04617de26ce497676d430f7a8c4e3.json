{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { i as isRTL } from './dir.js';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\nconst segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:auto}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\nconst segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\nconst Segment = /*@__PURE__*/proxyCustomElement(class Segment extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionSelect = createEvent(this, \"ionSelect\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.onClick = ev => {\n      const current = ev.target;\n      const previous = this.checked;\n      // If the current element is a segment then that means\n      // the user tried to swipe to a segment button and\n      // click a segment button at the same time so we should\n      // not update the checked segment button\n      if (current.tagName === 'ION-SEGMENT') {\n        return;\n      }\n      this.value = current.value;\n      if (current !== previous) {\n        this.emitValueChange();\n      }\n      if (this.scrollable || !this.swipeGesture) {\n        if (previous) {\n          this.checkButton(previous, current);\n        } else {\n          this.setCheckedClasses();\n        }\n      }\n    };\n    this.getSegmentButton = selector => {\n      var _a, _b;\n      const buttons = this.getButtons().filter(button => !button.disabled);\n      const currIndex = buttons.findIndex(button => button === document.activeElement);\n      switch (selector) {\n        case 'first':\n          return buttons[0];\n        case 'last':\n          return buttons[buttons.length - 1];\n        case 'next':\n          return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\n        case 'previous':\n          return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\n        default:\n          return null;\n      }\n    };\n    this.activated = false;\n    this.color = undefined;\n    this.disabled = false;\n    this.scrollable = false;\n    this.swipeGesture = true;\n    this.value = undefined;\n    this.selectOnFocus = false;\n  }\n  colorChanged(value, oldValue) {\n    /**\n     * If color is set after not having\n     * previously been set (or vice versa),\n     * we need to emit style so the segment-buttons\n     * can apply their color classes properly.\n     */\n    if (oldValue === undefined && value !== undefined || oldValue !== undefined && value === undefined) {\n      this.emitStyle();\n    }\n  }\n  swipeGestureChanged() {\n    this.gestureChanged();\n  }\n  valueChanged(value) {\n    /**\n     * `ionSelect` is emitted every time the value changes (internal or external changes).\n     * Used by `ion-segment-button` to determine if the button should be checked.\n     */\n    this.ionSelect.emit({\n      value\n    });\n    if (this.scrollable) {\n      const buttons = this.getButtons();\n      const activeButton = buttons.find(button => button.value === value);\n      if (activeButton !== undefined) {\n        /**\n         * Scrollable segment buttons should be\n         * centered within the view including\n         * buttons that are partially offscreen.\n         */\n        activeButton.scrollIntoView({\n          behavior: 'smooth',\n          inline: 'center',\n          /**\n           * Segment should scroll on the\n           * horizontal axis. `block: 'nearest'`\n           * ensures that the vertical axis\n           * does not scroll if the segment\n           * as a whole is already in view.\n           */\n          block: 'nearest'\n        });\n      }\n    }\n  }\n  disabledChanged() {\n    this.gestureChanged();\n    const buttons = this.getButtons();\n    for (const button of buttons) {\n      button.disabled = this.disabled;\n    }\n  }\n  gestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n    }\n  }\n  connectedCallback() {\n    this.emitStyle();\n  }\n  componentWillLoad() {\n    this.emitStyle();\n  }\n  async componentDidLoad() {\n    this.setCheckedClasses();\n    this.gesture = (await import('./index2.js')).createGesture({\n      el: this.el,\n      gestureName: 'segment',\n      gesturePriority: 100,\n      threshold: 0,\n      passive: false,\n      onStart: ev => this.onStart(ev),\n      onMove: ev => this.onMove(ev),\n      onEnd: ev => this.onEnd(ev)\n    });\n    this.gestureChanged();\n    if (this.disabled) {\n      this.disabledChanged();\n    }\n  }\n  onStart(detail) {\n    this.valueBeforeGesture = this.value;\n    this.activate(detail);\n  }\n  onMove(detail) {\n    this.setNextIndex(detail);\n  }\n  onEnd(detail) {\n    this.setActivated(false);\n    this.setNextIndex(detail, true);\n    detail.event.stopImmediatePropagation();\n    const value = this.value;\n    if (value !== undefined) {\n      if (this.valueBeforeGesture !== value) {\n        this.emitValueChange();\n      }\n    }\n    this.valueBeforeGesture = undefined;\n  }\n  /**\n   * Emits an `ionChange` event.\n   *\n   * This API should be called for user committed changes.\n   * This API should not be used for external value changes.\n   */\n  emitValueChange() {\n    const {\n      value\n    } = this;\n    this.ionChange.emit({\n      value\n    });\n  }\n  getButtons() {\n    return Array.from(this.el.querySelectorAll('ion-segment-button'));\n  }\n  get checked() {\n    return this.getButtons().find(button => button.value === this.value);\n  }\n  /*\n   * Activate both the segment and the buttons\n   * due to a bug with ::slotted in Safari\n   */\n  setActivated(activated) {\n    const buttons = this.getButtons();\n    buttons.forEach(button => {\n      if (activated) {\n        button.classList.add('segment-button-activated');\n      } else {\n        button.classList.remove('segment-button-activated');\n      }\n    });\n    this.activated = activated;\n  }\n  activate(detail) {\n    const clicked = detail.event.target;\n    const buttons = this.getButtons();\n    const checked = buttons.find(button => button.value === this.value);\n    // Make sure we are only checking for activation on a segment button\n    // since disabled buttons will get the click on the segment\n    if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n      return;\n    }\n    // If there are no checked buttons, set the current button to checked\n    if (!checked) {\n      this.value = clicked.value;\n      this.setCheckedClasses();\n    }\n    // If the gesture began on the clicked button with the indicator\n    // then we should activate the indicator\n    if (this.value === clicked.value) {\n      this.setActivated(true);\n    }\n  }\n  getIndicator(button) {\n    const root = button.shadowRoot || button;\n    return root.querySelector('.segment-button-indicator');\n  }\n  checkButton(previous, current) {\n    const previousIndicator = this.getIndicator(previous);\n    const currentIndicator = this.getIndicator(current);\n    if (previousIndicator === null || currentIndicator === null) {\n      return;\n    }\n    const previousClientRect = previousIndicator.getBoundingClientRect();\n    const currentClientRect = currentIndicator.getBoundingClientRect();\n    const widthDelta = previousClientRect.width / currentClientRect.width;\n    const xPosition = previousClientRect.left - currentClientRect.left;\n    // Scale the indicator width to match the previous indicator width\n    // and translate it on top of the previous indicator\n    const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;\n    writeTask(() => {\n      // Remove the transition before positioning on top of the previous indicator\n      currentIndicator.classList.remove('segment-button-indicator-animated');\n      currentIndicator.style.setProperty('transform', transform);\n      // Force a repaint to ensure the transform happens\n      currentIndicator.getBoundingClientRect();\n      // Add the transition to move the indicator into place\n      currentIndicator.classList.add('segment-button-indicator-animated');\n      // Remove the transform to slide the indicator back to the button clicked\n      currentIndicator.style.setProperty('transform', '');\n    });\n    this.value = current.value;\n    this.setCheckedClasses();\n  }\n  setCheckedClasses() {\n    const buttons = this.getButtons();\n    const index = buttons.findIndex(button => button.value === this.value);\n    const next = index + 1;\n    for (const button of buttons) {\n      button.classList.remove('segment-button-after-checked');\n    }\n    if (next < buttons.length) {\n      buttons[next].classList.add('segment-button-after-checked');\n    }\n  }\n  setNextIndex(detail) {\n    let isEnd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const rtl = isRTL(this.el);\n    const activated = this.activated;\n    const buttons = this.getButtons();\n    const index = buttons.findIndex(button => button.value === this.value);\n    const previous = buttons[index];\n    let current;\n    let nextIndex;\n    if (index === -1) {\n      return;\n    }\n    // Get the element that the touch event started on in case\n    // it was the checked button, then we will move the indicator\n    const rect = previous.getBoundingClientRect();\n    const left = rect.left;\n    const width = rect.width;\n    // Get the element that the gesture is on top of based on the currentX of the\n    // gesture event and the Y coordinate of the starting element, since the gesture\n    // can move up and down off of the segment\n    const currentX = detail.currentX;\n    const previousY = rect.top + rect.height / 2;\n    /**\n     * Segment can be used inside the shadow dom\n     * so doing document.elementFromPoint would never\n     * return a segment button in that instance.\n     * We use getRootNode to which will return the parent\n     * shadow root if used inside a shadow component and\n     * returns document otherwise.\n     */\n    const root = this.el.getRootNode();\n    const nextEl = root.elementFromPoint(currentX, previousY);\n    const decreaseIndex = rtl ? currentX > left + width : currentX < left;\n    const increaseIndex = rtl ? currentX < left : currentX > left + width;\n    // If the indicator is currently activated then we have started the gesture\n    // on top of the checked button so we need to slide the indicator\n    // by checking the button next to it as we move\n    if (activated && !isEnd) {\n      // Decrease index, move left in LTR & right in RTL\n      if (decreaseIndex) {\n        const newIndex = index - 1;\n        if (newIndex >= 0) {\n          nextIndex = newIndex;\n        }\n        // Increase index, moves right in LTR & left in RTL\n      } else if (increaseIndex) {\n        if (activated && !isEnd) {\n          const newIndex = index + 1;\n          if (newIndex < buttons.length) {\n            nextIndex = newIndex;\n          }\n        }\n      }\n      if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n        current = buttons[nextIndex];\n      }\n    }\n    // If the indicator is not activated then we will just set the indicator\n    // to the element where the gesture ended\n    if (!activated && isEnd) {\n      current = nextEl;\n    }\n    if (current != null) {\n      /**\n       * If current element is ion-segment then that means\n       * user tried to select a disabled ion-segment-button,\n       * and we should not update the ripple.\n       */\n      if (current.tagName === 'ION-SEGMENT') {\n        return false;\n      }\n      if (previous !== current) {\n        this.checkButton(previous, current);\n      }\n    }\n    return true;\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      segment: true\n    });\n  }\n  onKeyDown(ev) {\n    const rtl = isRTL(this.el);\n    let keyDownSelectsButton = this.selectOnFocus;\n    let current;\n    switch (ev.key) {\n      case 'ArrowRight':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n        break;\n      case 'ArrowLeft':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n        break;\n      case 'Home':\n        ev.preventDefault();\n        current = this.getSegmentButton('first');\n        break;\n      case 'End':\n        ev.preventDefault();\n        current = this.getSegmentButton('last');\n        break;\n      case ' ':\n      case 'Enter':\n        ev.preventDefault();\n        current = document.activeElement;\n        keyDownSelectsButton = true;\n    }\n    if (!current) {\n      return;\n    }\n    if (keyDownSelectsButton) {\n      const previous = this.checked;\n      this.checkButton(previous || current, current);\n      if (current !== previous) {\n        this.emitValueChange();\n      }\n    }\n    current.setFocus();\n  }\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      role: \"tablist\",\n      onClick: this.onClick,\n      class: createColorClasses(this.color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'segment-activated': this.activated,\n        'segment-disabled': this.disabled,\n        'segment-scrollable': this.scrollable\n      })\n    }, h(\"slot\", null));\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"color\": [\"colorChanged\"],\n      \"swipeGesture\": [\"swipeGestureChanged\"],\n      \"value\": [\"valueChanged\"],\n      \"disabled\": [\"disabledChanged\"]\n    };\n  }\n  static get style() {\n    return {\n      ios: segmentIosCss,\n      md: segmentMdCss\n    };\n  }\n}, [33, \"ion-segment\", {\n  \"color\": [513],\n  \"disabled\": [4],\n  \"scrollable\": [4],\n  \"swipeGesture\": [4, \"swipe-gesture\"],\n  \"value\": [1025],\n  \"selectOnFocus\": [4, \"select-on-focus\"],\n  \"activated\": [32]\n}, [[0, \"keydown\", \"onKeyDown\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-segment\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-segment\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Segment);\n        }\n        break;\n    }\n  });\n}\nconst IonSegment = Segment;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonSegment, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","createEvent","writeTask","h","Host","b","getIonMode","i","isRTL","c","createColorClasses","hostContext","segmentIosCss","segmentMdCss","Segment","constructor","__registerHost","__attachShadow","ionChange","ionSelect","ionStyle","onClick","ev","current","target","previous","checked","tagName","value","emitValueChange","scrollable","swipeGesture","checkButton","setCheckedClasses","getSegmentButton","selector","_a","_b","buttons","getButtons","filter","button","disabled","currIndex","findIndex","document","activeElement","length","activated","color","undefined","selectOnFocus","colorChanged","oldValue","emitStyle","swipeGestureChanged","gestureChanged","valueChanged","emit","activeButton","find","scrollIntoView","behavior","inline","block","disabledChanged","gesture","enable","connectedCallback","componentWillLoad","componentDidLoad","createGesture","el","gestureName","gesturePriority","threshold","passive","onStart","onMove","onEnd","detail","valueBeforeGesture","activate","setNextIndex","setActivated","event","stopImmediatePropagation","Array","from","querySelectorAll","forEach","classList","add","remove","clicked","getIndicator","root","shadowRoot","querySelector","previousIndicator","currentIndicator","previousClientRect","getBoundingClientRect","currentClientRect","widthDelta","width","xPosition","left","transform","style","setProperty","index","next","isEnd","arguments","rtl","nextIndex","rect","currentX","previousY","top","height","getRootNode","nextEl","elementFromPoint","decreaseIndex","increaseIndex","newIndex","segment","onKeyDown","keyDownSelectsButton","key","preventDefault","setFocus","render","mode","role","class","watchers","ios","md","defineCustomElement$1","customElements","components","get","define","IonSegment","defineCustomElement"],"sources":["C:/Users/Edinéia/Documents/NutriFood/node_modules/@ionic/core/components/ion-segment.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, writeTask, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nimport { i as isRTL } from './dir.js';\nimport { c as createColorClasses, h as hostContext } from './theme.js';\n\nconst segmentIosCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto;margin-top:0;margin-bottom:0;width:auto}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}\";\n\nconst segmentMdCss = \":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent}:host(.in-toolbar){min-height:var(--min-height)}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}\";\n\nconst Segment = /*@__PURE__*/ proxyCustomElement(class Segment extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionSelect = createEvent(this, \"ionSelect\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    this.onClick = (ev) => {\n      const current = ev.target;\n      const previous = this.checked;\n      // If the current element is a segment then that means\n      // the user tried to swipe to a segment button and\n      // click a segment button at the same time so we should\n      // not update the checked segment button\n      if (current.tagName === 'ION-SEGMENT') {\n        return;\n      }\n      this.value = current.value;\n      if (current !== previous) {\n        this.emitValueChange();\n      }\n      if (this.scrollable || !this.swipeGesture) {\n        if (previous) {\n          this.checkButton(previous, current);\n        }\n        else {\n          this.setCheckedClasses();\n        }\n      }\n    };\n    this.getSegmentButton = (selector) => {\n      var _a, _b;\n      const buttons = this.getButtons().filter((button) => !button.disabled);\n      const currIndex = buttons.findIndex((button) => button === document.activeElement);\n      switch (selector) {\n        case 'first':\n          return buttons[0];\n        case 'last':\n          return buttons[buttons.length - 1];\n        case 'next':\n          return (_a = buttons[currIndex + 1]) !== null && _a !== void 0 ? _a : buttons[0];\n        case 'previous':\n          return (_b = buttons[currIndex - 1]) !== null && _b !== void 0 ? _b : buttons[buttons.length - 1];\n        default:\n          return null;\n      }\n    };\n    this.activated = false;\n    this.color = undefined;\n    this.disabled = false;\n    this.scrollable = false;\n    this.swipeGesture = true;\n    this.value = undefined;\n    this.selectOnFocus = false;\n  }\n  colorChanged(value, oldValue) {\n    /**\n     * If color is set after not having\n     * previously been set (or vice versa),\n     * we need to emit style so the segment-buttons\n     * can apply their color classes properly.\n     */\n    if ((oldValue === undefined && value !== undefined) || (oldValue !== undefined && value === undefined)) {\n      this.emitStyle();\n    }\n  }\n  swipeGestureChanged() {\n    this.gestureChanged();\n  }\n  valueChanged(value) {\n    /**\n     * `ionSelect` is emitted every time the value changes (internal or external changes).\n     * Used by `ion-segment-button` to determine if the button should be checked.\n     */\n    this.ionSelect.emit({ value });\n    if (this.scrollable) {\n      const buttons = this.getButtons();\n      const activeButton = buttons.find((button) => button.value === value);\n      if (activeButton !== undefined) {\n        /**\n         * Scrollable segment buttons should be\n         * centered within the view including\n         * buttons that are partially offscreen.\n         */\n        activeButton.scrollIntoView({\n          behavior: 'smooth',\n          inline: 'center',\n          /**\n           * Segment should scroll on the\n           * horizontal axis. `block: 'nearest'`\n           * ensures that the vertical axis\n           * does not scroll if the segment\n           * as a whole is already in view.\n           */\n          block: 'nearest',\n        });\n      }\n    }\n  }\n  disabledChanged() {\n    this.gestureChanged();\n    const buttons = this.getButtons();\n    for (const button of buttons) {\n      button.disabled = this.disabled;\n    }\n  }\n  gestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);\n    }\n  }\n  connectedCallback() {\n    this.emitStyle();\n  }\n  componentWillLoad() {\n    this.emitStyle();\n  }\n  async componentDidLoad() {\n    this.setCheckedClasses();\n    this.gesture = (await import('./index2.js')).createGesture({\n      el: this.el,\n      gestureName: 'segment',\n      gesturePriority: 100,\n      threshold: 0,\n      passive: false,\n      onStart: (ev) => this.onStart(ev),\n      onMove: (ev) => this.onMove(ev),\n      onEnd: (ev) => this.onEnd(ev),\n    });\n    this.gestureChanged();\n    if (this.disabled) {\n      this.disabledChanged();\n    }\n  }\n  onStart(detail) {\n    this.valueBeforeGesture = this.value;\n    this.activate(detail);\n  }\n  onMove(detail) {\n    this.setNextIndex(detail);\n  }\n  onEnd(detail) {\n    this.setActivated(false);\n    this.setNextIndex(detail, true);\n    detail.event.stopImmediatePropagation();\n    const value = this.value;\n    if (value !== undefined) {\n      if (this.valueBeforeGesture !== value) {\n        this.emitValueChange();\n      }\n    }\n    this.valueBeforeGesture = undefined;\n  }\n  /**\n   * Emits an `ionChange` event.\n   *\n   * This API should be called for user committed changes.\n   * This API should not be used for external value changes.\n   */\n  emitValueChange() {\n    const { value } = this;\n    this.ionChange.emit({ value });\n  }\n  getButtons() {\n    return Array.from(this.el.querySelectorAll('ion-segment-button'));\n  }\n  get checked() {\n    return this.getButtons().find((button) => button.value === this.value);\n  }\n  /*\n   * Activate both the segment and the buttons\n   * due to a bug with ::slotted in Safari\n   */\n  setActivated(activated) {\n    const buttons = this.getButtons();\n    buttons.forEach((button) => {\n      if (activated) {\n        button.classList.add('segment-button-activated');\n      }\n      else {\n        button.classList.remove('segment-button-activated');\n      }\n    });\n    this.activated = activated;\n  }\n  activate(detail) {\n    const clicked = detail.event.target;\n    const buttons = this.getButtons();\n    const checked = buttons.find((button) => button.value === this.value);\n    // Make sure we are only checking for activation on a segment button\n    // since disabled buttons will get the click on the segment\n    if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {\n      return;\n    }\n    // If there are no checked buttons, set the current button to checked\n    if (!checked) {\n      this.value = clicked.value;\n      this.setCheckedClasses();\n    }\n    // If the gesture began on the clicked button with the indicator\n    // then we should activate the indicator\n    if (this.value === clicked.value) {\n      this.setActivated(true);\n    }\n  }\n  getIndicator(button) {\n    const root = button.shadowRoot || button;\n    return root.querySelector('.segment-button-indicator');\n  }\n  checkButton(previous, current) {\n    const previousIndicator = this.getIndicator(previous);\n    const currentIndicator = this.getIndicator(current);\n    if (previousIndicator === null || currentIndicator === null) {\n      return;\n    }\n    const previousClientRect = previousIndicator.getBoundingClientRect();\n    const currentClientRect = currentIndicator.getBoundingClientRect();\n    const widthDelta = previousClientRect.width / currentClientRect.width;\n    const xPosition = previousClientRect.left - currentClientRect.left;\n    // Scale the indicator width to match the previous indicator width\n    // and translate it on top of the previous indicator\n    const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;\n    writeTask(() => {\n      // Remove the transition before positioning on top of the previous indicator\n      currentIndicator.classList.remove('segment-button-indicator-animated');\n      currentIndicator.style.setProperty('transform', transform);\n      // Force a repaint to ensure the transform happens\n      currentIndicator.getBoundingClientRect();\n      // Add the transition to move the indicator into place\n      currentIndicator.classList.add('segment-button-indicator-animated');\n      // Remove the transform to slide the indicator back to the button clicked\n      currentIndicator.style.setProperty('transform', '');\n    });\n    this.value = current.value;\n    this.setCheckedClasses();\n  }\n  setCheckedClasses() {\n    const buttons = this.getButtons();\n    const index = buttons.findIndex((button) => button.value === this.value);\n    const next = index + 1;\n    for (const button of buttons) {\n      button.classList.remove('segment-button-after-checked');\n    }\n    if (next < buttons.length) {\n      buttons[next].classList.add('segment-button-after-checked');\n    }\n  }\n  setNextIndex(detail, isEnd = false) {\n    const rtl = isRTL(this.el);\n    const activated = this.activated;\n    const buttons = this.getButtons();\n    const index = buttons.findIndex((button) => button.value === this.value);\n    const previous = buttons[index];\n    let current;\n    let nextIndex;\n    if (index === -1) {\n      return;\n    }\n    // Get the element that the touch event started on in case\n    // it was the checked button, then we will move the indicator\n    const rect = previous.getBoundingClientRect();\n    const left = rect.left;\n    const width = rect.width;\n    // Get the element that the gesture is on top of based on the currentX of the\n    // gesture event and the Y coordinate of the starting element, since the gesture\n    // can move up and down off of the segment\n    const currentX = detail.currentX;\n    const previousY = rect.top + rect.height / 2;\n    /**\n     * Segment can be used inside the shadow dom\n     * so doing document.elementFromPoint would never\n     * return a segment button in that instance.\n     * We use getRootNode to which will return the parent\n     * shadow root if used inside a shadow component and\n     * returns document otherwise.\n     */\n    const root = this.el.getRootNode();\n    const nextEl = root.elementFromPoint(currentX, previousY);\n    const decreaseIndex = rtl ? currentX > left + width : currentX < left;\n    const increaseIndex = rtl ? currentX < left : currentX > left + width;\n    // If the indicator is currently activated then we have started the gesture\n    // on top of the checked button so we need to slide the indicator\n    // by checking the button next to it as we move\n    if (activated && !isEnd) {\n      // Decrease index, move left in LTR & right in RTL\n      if (decreaseIndex) {\n        const newIndex = index - 1;\n        if (newIndex >= 0) {\n          nextIndex = newIndex;\n        }\n        // Increase index, moves right in LTR & left in RTL\n      }\n      else if (increaseIndex) {\n        if (activated && !isEnd) {\n          const newIndex = index + 1;\n          if (newIndex < buttons.length) {\n            nextIndex = newIndex;\n          }\n        }\n      }\n      if (nextIndex !== undefined && !buttons[nextIndex].disabled) {\n        current = buttons[nextIndex];\n      }\n    }\n    // If the indicator is not activated then we will just set the indicator\n    // to the element where the gesture ended\n    if (!activated && isEnd) {\n      current = nextEl;\n    }\n    if (current != null) {\n      /**\n       * If current element is ion-segment then that means\n       * user tried to select a disabled ion-segment-button,\n       * and we should not update the ripple.\n       */\n      if (current.tagName === 'ION-SEGMENT') {\n        return false;\n      }\n      if (previous !== current) {\n        this.checkButton(previous, current);\n      }\n    }\n    return true;\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      segment: true,\n    });\n  }\n  onKeyDown(ev) {\n    const rtl = isRTL(this.el);\n    let keyDownSelectsButton = this.selectOnFocus;\n    let current;\n    switch (ev.key) {\n      case 'ArrowRight':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('previous') : this.getSegmentButton('next');\n        break;\n      case 'ArrowLeft':\n        ev.preventDefault();\n        current = rtl ? this.getSegmentButton('next') : this.getSegmentButton('previous');\n        break;\n      case 'Home':\n        ev.preventDefault();\n        current = this.getSegmentButton('first');\n        break;\n      case 'End':\n        ev.preventDefault();\n        current = this.getSegmentButton('last');\n        break;\n      case ' ':\n      case 'Enter':\n        ev.preventDefault();\n        current = document.activeElement;\n        keyDownSelectsButton = true;\n    }\n    if (!current) {\n      return;\n    }\n    if (keyDownSelectsButton) {\n      const previous = this.checked;\n      this.checkButton(previous || current, current);\n      if (current !== previous) {\n        this.emitValueChange();\n      }\n    }\n    current.setFocus();\n  }\n  render() {\n    const mode = getIonMode(this);\n    return (h(Host, { role: \"tablist\", onClick: this.onClick, class: createColorClasses(this.color, {\n        [mode]: true,\n        'in-toolbar': hostContext('ion-toolbar', this.el),\n        'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n        'segment-activated': this.activated,\n        'segment-disabled': this.disabled,\n        'segment-scrollable': this.scrollable,\n      }) }, h(\"slot\", null)));\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"color\": [\"colorChanged\"],\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"value\": [\"valueChanged\"],\n    \"disabled\": [\"disabledChanged\"]\n  }; }\n  static get style() { return {\n    ios: segmentIosCss,\n    md: segmentMdCss\n  }; }\n}, [33, \"ion-segment\", {\n    \"color\": [513],\n    \"disabled\": [4],\n    \"scrollable\": [4],\n    \"swipeGesture\": [4, \"swipe-gesture\"],\n    \"value\": [1025],\n    \"selectOnFocus\": [4, \"select-on-focus\"],\n    \"activated\": [32]\n  }, [[0, \"keydown\", \"onKeyDown\"]]]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-segment\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-segment\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Segment);\n      }\n      break;\n  } });\n}\n\nconst IonSegment = Segment;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonSegment, defineCustomElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}