{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win, d as doc } from './index5.js';\nimport { K as Keyboard, a as KeyboardResize } from './keyboard.js';\n\n/**\n * The element that resizes when the keyboard opens\n * is going to depend on the resize mode\n * which is why we check that here.\n */\nconst getResizeContainer = resizeMode => {\n  /**\n   * If doc is undefined then we are\n   * in an SSR environment, so the keyboard\n   * adjustment does not apply.\n   * If the webview does not resize then there\n   * is no container to resize.\n   */\n  if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\n    return null;\n  }\n  /**\n   * The three remaining resize modes: Native, Ionic, and Body\n   * all cause `ion-app` to resize, so we can listen for changes\n   * on that. In the event `ion-app` is not available then\n   * we can fall back to `body`.\n   */\n  const ionApp = doc.querySelector('ion-app');\n  return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\n};\n/**\n * Get the height of ion-app or body.\n * This is used for determining if the webview\n * has resized before the keyboard closed.\n * */\nconst getResizeContainerHeight = resizeMode => {\n  const containerElement = getResizeContainer(resizeMode);\n  return containerElement === null ? 0 : containerElement.clientHeight;\n};\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\nconst createKeyboardController = async keyboardChangeCallback => {\n  let keyboardWillShowHandler;\n  let keyboardWillHideHandler;\n  let keyboardVisible;\n  /**\n   * This lets us determine if the webview content\n   * has resized as a result of the keyboard.\n   */\n  let initialResizeContainerHeight;\n  const init = async () => {\n    const resizeOptions = await Keyboard.getResizeMode();\n    const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\n    keyboardWillShowHandler = () => {\n      /**\n       * We need to compute initialResizeContainerHeight right before\n       * the keyboard opens to guarantee the resize container is visible.\n       * The resize container may not be visible if we compute this\n       * as soon as the keyboard controller is created.\n       * We should only need to do this once to avoid additional clientHeight\n       * computations.\n       */\n      if (initialResizeContainerHeight === undefined) {\n        initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\n      }\n      keyboardVisible = true;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    keyboardWillHideHandler = () => {\n      keyboardVisible = false;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n  };\n  const fireChangeCallback = (state, resizeMode) => {\n    if (keyboardChangeCallback) {\n      keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\n    }\n  };\n  /**\n   * Code responding to keyboard lifecycles may need\n   * to show/hide content once the webview has\n   * resized as a result of the keyboard showing/hiding.\n   * createResizePromiseIfNeeded provides a way for code to wait for the\n   * resize event that was triggered as a result of the keyboard.\n   */\n  const createResizePromiseIfNeeded = resizeMode => {\n    if (\n    /**\n     * If we are in an SSR environment then there is\n     * no window to resize. Additionally, if there\n     * is no resize mode or the resize mode is \"None\"\n     * then initialResizeContainerHeight will be 0\n     */\n    initialResizeContainerHeight === 0 ||\n    /**\n     * If the keyboard is closed before the webview resizes initially\n     * then the webview will never resize.\n     */\n    initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\n      return;\n    }\n    /**\n     * Get the resize container so we can\n     * attach the ResizeObserver below to\n     * the correct element.\n     */\n    const containerElement = getResizeContainer(resizeMode);\n    if (containerElement === null) {\n      return;\n    }\n    /**\n     * Some part of the web content should resize,\n     * and we need to listen for a resize.\n     */\n    return new Promise(resolve => {\n      const callback = () => {\n        /**\n         * As per the spec, the ResizeObserver\n         * will fire when observation starts if\n         * the observed element is rendered and does not\n         * have a size of 0 x 0. However, the watched element\n         * may or may not have resized by the time this first\n         * callback is fired. As a result, we need to check\n         * the dimensions of the element.\n         *\n         * https://www.w3.org/TR/resize-observer/#intro\n         */\n        if (containerElement.clientHeight === initialResizeContainerHeight) {\n          /**\n           * The resize happened, so stop listening\n           * for resize on this element.\n           */\n          ro.disconnect();\n          resolve();\n        }\n      };\n      /**\n       * In Capacitor there can be delay between when the window\n       * resizes and when the container element resizes, so we cannot\n       * rely on a 'resize' event listener on the window.\n       * Instead, we need to determine when the container\n       * element resizes using a ResizeObserver.\n       */\n      const ro = new ResizeObserver(callback);\n      ro.observe(containerElement);\n    });\n  };\n  const destroy = () => {\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n    keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n  };\n  const isKeyboardVisible = () => keyboardVisible;\n  await init();\n  return {\n    init,\n    destroy,\n    isKeyboardVisible\n  };\n};\nexport { createKeyboardController as c };","map":{"version":3,"names":["w","win","d","doc","K","Keyboard","a","KeyboardResize","getResizeContainer","resizeMode","undefined","None","ionApp","querySelector","body","getResizeContainerHeight","containerElement","clientHeight","createKeyboardController","keyboardChangeCallback","keyboardWillShowHandler","keyboardWillHideHandler","keyboardVisible","initialResizeContainerHeight","init","resizeOptions","getResizeMode","mode","fireChangeCallback","addEventListener","state","createResizePromiseIfNeeded","Promise","resolve","callback","ro","disconnect","ResizeObserver","observe","destroy","removeEventListener","isKeyboardVisible","c"],"sources":["C:/Users/EdinÃ©ia/Documents/NutriFood/node_modules/@ionic/core/components/keyboard-controller.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win, d as doc } from './index5.js';\nimport { K as Keyboard, a as KeyboardResize } from './keyboard.js';\n\n/**\n * The element that resizes when the keyboard opens\n * is going to depend on the resize mode\n * which is why we check that here.\n */\nconst getResizeContainer = (resizeMode) => {\n  /**\n   * If doc is undefined then we are\n   * in an SSR environment, so the keyboard\n   * adjustment does not apply.\n   * If the webview does not resize then there\n   * is no container to resize.\n   */\n  if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\n    return null;\n  }\n  /**\n   * The three remaining resize modes: Native, Ionic, and Body\n   * all cause `ion-app` to resize, so we can listen for changes\n   * on that. In the event `ion-app` is not available then\n   * we can fall back to `body`.\n   */\n  const ionApp = doc.querySelector('ion-app');\n  return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\n};\n/**\n * Get the height of ion-app or body.\n * This is used for determining if the webview\n * has resized before the keyboard closed.\n * */\nconst getResizeContainerHeight = (resizeMode) => {\n  const containerElement = getResizeContainer(resizeMode);\n  return containerElement === null ? 0 : containerElement.clientHeight;\n};\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\nconst createKeyboardController = async (keyboardChangeCallback) => {\n  let keyboardWillShowHandler;\n  let keyboardWillHideHandler;\n  let keyboardVisible;\n  /**\n   * This lets us determine if the webview content\n   * has resized as a result of the keyboard.\n   */\n  let initialResizeContainerHeight;\n  const init = async () => {\n    const resizeOptions = await Keyboard.getResizeMode();\n    const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\n    keyboardWillShowHandler = () => {\n      /**\n       * We need to compute initialResizeContainerHeight right before\n       * the keyboard opens to guarantee the resize container is visible.\n       * The resize container may not be visible if we compute this\n       * as soon as the keyboard controller is created.\n       * We should only need to do this once to avoid additional clientHeight\n       * computations.\n       */\n      if (initialResizeContainerHeight === undefined) {\n        initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\n      }\n      keyboardVisible = true;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    keyboardWillHideHandler = () => {\n      keyboardVisible = false;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n  };\n  const fireChangeCallback = (state, resizeMode) => {\n    if (keyboardChangeCallback) {\n      keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\n    }\n  };\n  /**\n   * Code responding to keyboard lifecycles may need\n   * to show/hide content once the webview has\n   * resized as a result of the keyboard showing/hiding.\n   * createResizePromiseIfNeeded provides a way for code to wait for the\n   * resize event that was triggered as a result of the keyboard.\n   */\n  const createResizePromiseIfNeeded = (resizeMode) => {\n    if (\n    /**\n     * If we are in an SSR environment then there is\n     * no window to resize. Additionally, if there\n     * is no resize mode or the resize mode is \"None\"\n     * then initialResizeContainerHeight will be 0\n     */\n    initialResizeContainerHeight === 0 ||\n      /**\n       * If the keyboard is closed before the webview resizes initially\n       * then the webview will never resize.\n       */\n      initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\n      return;\n    }\n    /**\n     * Get the resize container so we can\n     * attach the ResizeObserver below to\n     * the correct element.\n     */\n    const containerElement = getResizeContainer(resizeMode);\n    if (containerElement === null) {\n      return;\n    }\n    /**\n     * Some part of the web content should resize,\n     * and we need to listen for a resize.\n     */\n    return new Promise((resolve) => {\n      const callback = () => {\n        /**\n         * As per the spec, the ResizeObserver\n         * will fire when observation starts if\n         * the observed element is rendered and does not\n         * have a size of 0 x 0. However, the watched element\n         * may or may not have resized by the time this first\n         * callback is fired. As a result, we need to check\n         * the dimensions of the element.\n         *\n         * https://www.w3.org/TR/resize-observer/#intro\n         */\n        if (containerElement.clientHeight === initialResizeContainerHeight) {\n          /**\n           * The resize happened, so stop listening\n           * for resize on this element.\n           */\n          ro.disconnect();\n          resolve();\n        }\n      };\n      /**\n       * In Capacitor there can be delay between when the window\n       * resizes and when the container element resizes, so we cannot\n       * rely on a 'resize' event listener on the window.\n       * Instead, we need to determine when the container\n       * element resizes using a ResizeObserver.\n       */\n      const ro = new ResizeObserver(callback);\n      ro.observe(containerElement);\n    });\n  };\n  const destroy = () => {\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n    keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n  };\n  const isKeyboardVisible = () => keyboardVisible;\n  await init();\n  return { init, destroy, isKeyboardVisible };\n};\n\nexport { createKeyboardController as c };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}